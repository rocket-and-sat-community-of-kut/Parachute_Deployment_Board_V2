
PDSv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001dfc  08001dfc  00011dfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e38  08001e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000254  20000004  08001e44  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000258  08001e44  00020258  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011eeb  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002448  00000000  00000000  00031f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006f60  00000000  00000000  0003435f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000918  00000000  00000000  0003b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d58  00000000  00000000  0003bbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000518d  00000000  00000000  0003c930  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000371f  00000000  00000000  00041abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000451dc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ba0  00000000  00000000  00045258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001de4 	.word	0x08001de4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001de4 	.word	0x08001de4

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__udivsi3>:
 8000130:	2200      	movs	r2, #0
 8000132:	0843      	lsrs	r3, r0, #1
 8000134:	428b      	cmp	r3, r1
 8000136:	d374      	bcc.n	8000222 <__udivsi3+0xf2>
 8000138:	0903      	lsrs	r3, r0, #4
 800013a:	428b      	cmp	r3, r1
 800013c:	d35f      	bcc.n	80001fe <__udivsi3+0xce>
 800013e:	0a03      	lsrs	r3, r0, #8
 8000140:	428b      	cmp	r3, r1
 8000142:	d344      	bcc.n	80001ce <__udivsi3+0x9e>
 8000144:	0b03      	lsrs	r3, r0, #12
 8000146:	428b      	cmp	r3, r1
 8000148:	d328      	bcc.n	800019c <__udivsi3+0x6c>
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d30d      	bcc.n	800016c <__udivsi3+0x3c>
 8000150:	22ff      	movs	r2, #255	; 0xff
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	ba12      	rev	r2, r2
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d302      	bcc.n	8000162 <__udivsi3+0x32>
 800015c:	1212      	asrs	r2, r2, #8
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	d065      	beq.n	800022e <__udivsi3+0xfe>
 8000162:	0b03      	lsrs	r3, r0, #12
 8000164:	428b      	cmp	r3, r1
 8000166:	d319      	bcc.n	800019c <__udivsi3+0x6c>
 8000168:	e000      	b.n	800016c <__udivsi3+0x3c>
 800016a:	0a09      	lsrs	r1, r1, #8
 800016c:	0bc3      	lsrs	r3, r0, #15
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x46>
 8000172:	03cb      	lsls	r3, r1, #15
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b83      	lsrs	r3, r0, #14
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x52>
 800017e:	038b      	lsls	r3, r1, #14
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b43      	lsrs	r3, r0, #13
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x5e>
 800018a:	034b      	lsls	r3, r1, #13
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x6a>
 8000196:	030b      	lsls	r3, r1, #12
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0ac3      	lsrs	r3, r0, #11
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x76>
 80001a2:	02cb      	lsls	r3, r1, #11
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a83      	lsrs	r3, r0, #10
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x82>
 80001ae:	028b      	lsls	r3, r1, #10
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a43      	lsrs	r3, r0, #9
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x8e>
 80001ba:	024b      	lsls	r3, r1, #9
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a03      	lsrs	r3, r0, #8
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x9a>
 80001c6:	020b      	lsls	r3, r1, #8
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	d2cd      	bcs.n	800016a <__udivsi3+0x3a>
 80001ce:	09c3      	lsrs	r3, r0, #7
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xa8>
 80001d4:	01cb      	lsls	r3, r1, #7
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0983      	lsrs	r3, r0, #6
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xb4>
 80001e0:	018b      	lsls	r3, r1, #6
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0943      	lsrs	r3, r0, #5
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xc0>
 80001ec:	014b      	lsls	r3, r1, #5
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0903      	lsrs	r3, r0, #4
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xcc>
 80001f8:	010b      	lsls	r3, r1, #4
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	08c3      	lsrs	r3, r0, #3
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xd8>
 8000204:	00cb      	lsls	r3, r1, #3
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0883      	lsrs	r3, r0, #2
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xe4>
 8000210:	008b      	lsls	r3, r1, #2
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0843      	lsrs	r3, r0, #1
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xf0>
 800021c:	004b      	lsls	r3, r1, #1
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	1a41      	subs	r1, r0, r1
 8000224:	d200      	bcs.n	8000228 <__udivsi3+0xf8>
 8000226:	4601      	mov	r1, r0
 8000228:	4152      	adcs	r2, r2
 800022a:	4610      	mov	r0, r2
 800022c:	4770      	bx	lr
 800022e:	e7ff      	b.n	8000230 <__udivsi3+0x100>
 8000230:	b501      	push	{r0, lr}
 8000232:	2000      	movs	r0, #0
 8000234:	f000 f806 	bl	8000244 <__aeabi_idiv0>
 8000238:	bd02      	pop	{r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)

0800023c <__aeabi_uidivmod>:
 800023c:	2900      	cmp	r1, #0
 800023e:	d0f7      	beq.n	8000230 <__udivsi3+0x100>
 8000240:	e776      	b.n	8000130 <__udivsi3>
 8000242:	4770      	bx	lr

08000244 <__aeabi_idiv0>:
 8000244:	4770      	bx	lr
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b510      	push	{r4, lr}
 800024a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800024c:	f000 fc68 	bl	8000b20 <HAL_RCC_GetHCLKFreq>
 8000250:	21fa      	movs	r1, #250	; 0xfa
 8000252:	0089      	lsls	r1, r1, #2
 8000254:	f7ff ff6c 	bl	8000130 <__udivsi3>
 8000258:	f000 f870 	bl	800033c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800025c:	2001      	movs	r0, #1
 800025e:	2200      	movs	r2, #0
 8000260:	0021      	movs	r1, r4
 8000262:	4240      	negs	r0, r0
 8000264:	f000 f830 	bl	80002c8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000268:	2000      	movs	r0, #0
 800026a:	bd10      	pop	{r4, pc}

0800026c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	2310      	movs	r3, #16
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_Init+0x1c>)
{
 8000270:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000272:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000276:	430b      	orrs	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800027a:	f7ff ffe5 	bl	8000248 <HAL_InitTick>
  HAL_MspInit();
 800027e:	f001 fc35 	bl	8001aec <HAL_MspInit>
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40022000 	.word	0x40022000

0800028c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800028c:	4a02      	ldr	r2, [pc, #8]	; (8000298 <HAL_IncTick+0xc>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000020 	.word	0x20000020

0800029c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_GetTick+0x8>)
 800029e:	6818      	ldr	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000020 	.word	0x20000020

080002a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80002aa:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ac:	f7ff fff6 	bl	800029c <HAL_GetTick>
  uint32_t wait = Delay;
 80002b0:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b2:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002b4:	1c63      	adds	r3, r4, #1
 80002b6:	1e5a      	subs	r2, r3, #1
 80002b8:	4193      	sbcs	r3, r2
 80002ba:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002bc:	f7ff ffee 	bl	800029c <HAL_GetTick>
 80002c0:	1b40      	subs	r0, r0, r5
 80002c2:	42a0      	cmp	r0, r4
 80002c4:	d3fa      	bcc.n	80002bc <HAL_Delay+0x14>
  {
  }
}
 80002c6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002c8:	b570      	push	{r4, r5, r6, lr}
 80002ca:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002cc:	2800      	cmp	r0, #0
 80002ce:	da14      	bge.n	80002fa <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	230f      	movs	r3, #15
 80002d2:	b2c0      	uxtb	r0, r0
 80002d4:	4003      	ands	r3, r0
 80002d6:	3b08      	subs	r3, #8
 80002d8:	4a11      	ldr	r2, [pc, #68]	; (8000320 <HAL_NVIC_SetPriority+0x58>)
 80002da:	089b      	lsrs	r3, r3, #2
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	189b      	adds	r3, r3, r2
 80002e0:	2203      	movs	r2, #3
 80002e2:	4010      	ands	r0, r2
 80002e4:	4090      	lsls	r0, r2
 80002e6:	32fc      	adds	r2, #252	; 0xfc
 80002e8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ea:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ec:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002ee:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f0:	69dc      	ldr	r4, [r3, #28]
 80002f2:	43ac      	bics	r4, r5
 80002f4:	4321      	orrs	r1, r4
 80002f6:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002f8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002fa:	2503      	movs	r5, #3
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	4028      	ands	r0, r5
 8000300:	40a8      	lsls	r0, r5
 8000302:	35fc      	adds	r5, #252	; 0xfc
 8000304:	002e      	movs	r6, r5
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_NVIC_SetPriority+0x5c>)
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	189b      	adds	r3, r3, r2
 800030c:	22c0      	movs	r2, #192	; 0xc0
 800030e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000310:	4029      	ands	r1, r5
 8000312:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000314:	0092      	lsls	r2, r2, #2
 8000316:	589c      	ldr	r4, [r3, r2]
 8000318:	43b4      	bics	r4, r6
 800031a:	4321      	orrs	r1, r4
 800031c:	5099      	str	r1, [r3, r2]
 800031e:	e7eb      	b.n	80002f8 <HAL_NVIC_SetPriority+0x30>
 8000320:	e000ed00 	.word	0xe000ed00
 8000324:	e000e100 	.word	0xe000e100

08000328 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000328:	231f      	movs	r3, #31
 800032a:	4018      	ands	r0, r3
 800032c:	3b1e      	subs	r3, #30
 800032e:	4083      	lsls	r3, r0
 8000330:	4a01      	ldr	r2, [pc, #4]	; (8000338 <HAL_NVIC_EnableIRQ+0x10>)
 8000332:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000334:	4770      	bx	lr
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	e000e100 	.word	0xe000e100

0800033c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <HAL_SYSTICK_Config+0x28>)
 800033e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000340:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000342:	4293      	cmp	r3, r2
 8000344:	d80d      	bhi.n	8000362 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000346:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034a:	4808      	ldr	r0, [pc, #32]	; (800036c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800034c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034e:	6a03      	ldr	r3, [r0, #32]
 8000350:	0609      	lsls	r1, r1, #24
 8000352:	021b      	lsls	r3, r3, #8
 8000354:	0a1b      	lsrs	r3, r3, #8
 8000356:	430b      	orrs	r3, r1
 8000358:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800035c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800035e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000360:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000362:	4770      	bx	lr
 8000364:	00ffffff 	.word	0x00ffffff
 8000368:	e000e010 	.word	0xe000e010
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000372:	680b      	ldr	r3, [r1, #0]
{ 
 8000374:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000376:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000378:	2300      	movs	r3, #0
{ 
 800037a:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037c:	9a02      	ldr	r2, [sp, #8]
 800037e:	40da      	lsrs	r2, r3
 8000380:	d101      	bne.n	8000386 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000382:	b007      	add	sp, #28
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000386:	2201      	movs	r2, #1
 8000388:	409a      	lsls	r2, r3
 800038a:	9203      	str	r2, [sp, #12]
 800038c:	9903      	ldr	r1, [sp, #12]
 800038e:	9a02      	ldr	r2, [sp, #8]
 8000390:	400a      	ands	r2, r1
 8000392:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000394:	d100      	bne.n	8000398 <HAL_GPIO_Init+0x28>
 8000396:	e088      	b.n	80004aa <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000398:	9a01      	ldr	r2, [sp, #4]
 800039a:	2110      	movs	r1, #16
 800039c:	6852      	ldr	r2, [r2, #4]
 800039e:	0016      	movs	r6, r2
 80003a0:	438e      	bics	r6, r1
 80003a2:	2e02      	cmp	r6, #2
 80003a4:	d10e      	bne.n	80003c4 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003a6:	2507      	movs	r5, #7
 80003a8:	401d      	ands	r5, r3
 80003aa:	00ad      	lsls	r5, r5, #2
 80003ac:	3901      	subs	r1, #1
 80003ae:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80003b0:	08dc      	lsrs	r4, r3, #3
 80003b2:	00a4      	lsls	r4, r4, #2
 80003b4:	1904      	adds	r4, r0, r4
 80003b6:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003b8:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	6909      	ldr	r1, [r1, #16]
 80003be:	40a9      	lsls	r1, r5
 80003c0:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 80003c2:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003c4:	2403      	movs	r4, #3
 80003c6:	005f      	lsls	r7, r3, #1
 80003c8:	40bc      	lsls	r4, r7
 80003ca:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003cc:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ce:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003d0:	4025      	ands	r5, r4
 80003d2:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003d4:	2503      	movs	r5, #3
 80003d6:	4015      	ands	r5, r2
 80003d8:	40bd      	lsls	r5, r7
 80003da:	4661      	mov	r1, ip
 80003dc:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003de:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003e0:	2e01      	cmp	r6, #1
 80003e2:	d80f      	bhi.n	8000404 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e4:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003e6:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003e8:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003ea:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003ec:	40bd      	lsls	r5, r7
 80003ee:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003f0:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003f2:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f4:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003f6:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003f8:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003fa:	2101      	movs	r1, #1
 80003fc:	400d      	ands	r5, r1
 80003fe:	409d      	lsls	r5, r3
 8000400:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8000402:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000404:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000406:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000408:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040a:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800040c:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800040e:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000410:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000412:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000414:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000416:	420a      	tst	r2, r1
 8000418:	d047      	beq.n	80004aa <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800041a:	2101      	movs	r1, #1
 800041c:	4c24      	ldr	r4, [pc, #144]	; (80004b0 <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000420:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000422:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000424:	430d      	orrs	r5, r1
 8000426:	61a5      	str	r5, [r4, #24]
 8000428:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 800042a:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042c:	400c      	ands	r4, r1
 800042e:	9405      	str	r4, [sp, #20]
 8000430:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000432:	240f      	movs	r4, #15
 8000434:	491f      	ldr	r1, [pc, #124]	; (80004b4 <HAL_GPIO_Init+0x144>)
 8000436:	00ad      	lsls	r5, r5, #2
 8000438:	00b6      	lsls	r6, r6, #2
 800043a:	186d      	adds	r5, r5, r1
 800043c:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000440:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000442:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000444:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000446:	2400      	movs	r4, #0
 8000448:	4288      	cmp	r0, r1
 800044a:	d008      	beq.n	800045e <HAL_GPIO_Init+0xee>
 800044c:	491a      	ldr	r1, [pc, #104]	; (80004b8 <HAL_GPIO_Init+0x148>)
 800044e:	3401      	adds	r4, #1
 8000450:	4288      	cmp	r0, r1
 8000452:	d004      	beq.n	800045e <HAL_GPIO_Init+0xee>
 8000454:	4919      	ldr	r1, [pc, #100]	; (80004bc <HAL_GPIO_Init+0x14c>)
 8000456:	3404      	adds	r4, #4
 8000458:	4288      	cmp	r0, r1
 800045a:	d100      	bne.n	800045e <HAL_GPIO_Init+0xee>
 800045c:	3c03      	subs	r4, #3
 800045e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000460:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000462:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000464:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000466:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000468:	4c15      	ldr	r4, [pc, #84]	; (80004c0 <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800046a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800046c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800046e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000470:	03d1      	lsls	r1, r2, #15
 8000472:	d401      	bmi.n	8000478 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000474:	003e      	movs	r6, r7
 8000476:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000478:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800047a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800047c:	9e00      	ldr	r6, [sp, #0]
 800047e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000480:	0391      	lsls	r1, r2, #14
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000484:	003e      	movs	r6, r7
 8000486:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000488:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800048a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 800048c:	9e00      	ldr	r6, [sp, #0]
 800048e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000490:	02d1      	lsls	r1, r2, #11
 8000492:	d401      	bmi.n	8000498 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000494:	003e      	movs	r6, r7
 8000496:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000498:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800049a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 800049c:	9f00      	ldr	r7, [sp, #0]
 800049e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a0:	0292      	lsls	r2, r2, #10
 80004a2:	d401      	bmi.n	80004a8 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80004a4:	402e      	ands	r6, r5
 80004a6:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80004a8:	60e7      	str	r7, [r4, #12]
    position++;
 80004aa:	3301      	adds	r3, #1
 80004ac:	e766      	b.n	800037c <HAL_GPIO_Init+0xc>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40021000 	.word	0x40021000
 80004b4:	40010000 	.word	0x40010000
 80004b8:	48000400 	.word	0x48000400
 80004bc:	48000800 	.word	0x48000800
 80004c0:	40010400 	.word	0x40010400

080004c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	d001      	beq.n	80004cc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004c8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004ca:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004cc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004ce:	e7fc      	b.n	80004ca <HAL_GPIO_WritePin+0x6>

080004d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80004d2:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4210      	tst	r0, r2
 80004d8:	d002      	beq.n	80004e0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004dc:	f001 f948 	bl	8001770 <HAL_GPIO_EXTI_Callback>
  }
}
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	40010400 	.word	0x40010400

080004e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ea:	6803      	ldr	r3, [r0, #0]
{
 80004ec:	b085      	sub	sp, #20
 80004ee:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f0:	07db      	lsls	r3, r3, #31
 80004f2:	d433      	bmi.n	800055c <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004f4:	682b      	ldr	r3, [r5, #0]
 80004f6:	079b      	lsls	r3, r3, #30
 80004f8:	d500      	bpl.n	80004fc <HAL_RCC_OscConfig+0x14>
 80004fa:	e08a      	b.n	8000612 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004fc:	682b      	ldr	r3, [r5, #0]
 80004fe:	071b      	lsls	r3, r3, #28
 8000500:	d500      	bpl.n	8000504 <HAL_RCC_OscConfig+0x1c>
 8000502:	e0ca      	b.n	800069a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000504:	682b      	ldr	r3, [r5, #0]
 8000506:	075b      	lsls	r3, r3, #29
 8000508:	d500      	bpl.n	800050c <HAL_RCC_OscConfig+0x24>
 800050a:	e0ed      	b.n	80006e8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800050c:	682b      	ldr	r3, [r5, #0]
 800050e:	06db      	lsls	r3, r3, #27
 8000510:	d51a      	bpl.n	8000548 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000512:	696a      	ldr	r2, [r5, #20]
 8000514:	4cbc      	ldr	r4, [pc, #752]	; (8000808 <HAL_RCC_OscConfig+0x320>)
 8000516:	2304      	movs	r3, #4
 8000518:	2a01      	cmp	r2, #1
 800051a:	d000      	beq.n	800051e <HAL_RCC_OscConfig+0x36>
 800051c:	e159      	b.n	80007d2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800051e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000520:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000522:	430b      	orrs	r3, r1
 8000524:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000528:	431a      	orrs	r2, r3
 800052a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800052c:	f7ff feb6 	bl	800029c <HAL_GetTick>
 8000530:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000534:	4233      	tst	r3, r6
 8000536:	d100      	bne.n	800053a <HAL_RCC_OscConfig+0x52>
 8000538:	e144      	b.n	80007c4 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800053a:	21f8      	movs	r1, #248	; 0xf8
 800053c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800053e:	69ab      	ldr	r3, [r5, #24]
 8000540:	438a      	bics	r2, r1
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	4313      	orrs	r3, r2
 8000546:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000548:	682b      	ldr	r3, [r5, #0]
 800054a:	069b      	lsls	r3, r3, #26
 800054c:	d500      	bpl.n	8000550 <HAL_RCC_OscConfig+0x68>
 800054e:	e167      	b.n	8000820 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000550:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000552:	2900      	cmp	r1, #0
 8000554:	d000      	beq.n	8000558 <HAL_RCC_OscConfig+0x70>
 8000556:	e1a4      	b.n	80008a2 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000558:	2000      	movs	r0, #0
 800055a:	e018      	b.n	800058e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800055c:	210c      	movs	r1, #12
 800055e:	4caa      	ldr	r4, [pc, #680]	; (8000808 <HAL_RCC_OscConfig+0x320>)
 8000560:	6862      	ldr	r2, [r4, #4]
 8000562:	400a      	ands	r2, r1
 8000564:	2a04      	cmp	r2, #4
 8000566:	d00b      	beq.n	8000580 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000568:	6863      	ldr	r3, [r4, #4]
 800056a:	400b      	ands	r3, r1
 800056c:	2b08      	cmp	r3, #8
 800056e:	d110      	bne.n	8000592 <HAL_RCC_OscConfig+0xaa>
 8000570:	22c0      	movs	r2, #192	; 0xc0
 8000572:	6863      	ldr	r3, [r4, #4]
 8000574:	0252      	lsls	r2, r2, #9
 8000576:	4013      	ands	r3, r2
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	0252      	lsls	r2, r2, #9
 800057c:	4293      	cmp	r3, r2
 800057e:	d108      	bne.n	8000592 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	039b      	lsls	r3, r3, #14
 8000584:	d5b6      	bpl.n	80004f4 <HAL_RCC_OscConfig+0xc>
 8000586:	686b      	ldr	r3, [r5, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1b3      	bne.n	80004f4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800058c:	2001      	movs	r0, #1
}
 800058e:	b005      	add	sp, #20
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000592:	686b      	ldr	r3, [r5, #4]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d113      	bne.n	80005c0 <HAL_RCC_OscConfig+0xd8>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	6822      	ldr	r2, [r4, #0]
 800059c:	025b      	lsls	r3, r3, #9
 800059e:	4313      	orrs	r3, r2
 80005a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005a2:	f7ff fe7b 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005a6:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80005a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005aa:	02b6      	lsls	r6, r6, #10
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	4233      	tst	r3, r6
 80005b0:	d1a0      	bne.n	80004f4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005b2:	f7ff fe73 	bl	800029c <HAL_GetTick>
 80005b6:	1bc0      	subs	r0, r0, r7
 80005b8:	2864      	cmp	r0, #100	; 0x64
 80005ba:	d9f7      	bls.n	80005ac <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 80005bc:	2003      	movs	r0, #3
 80005be:	e7e6      	b.n	800058e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d116      	bne.n	80005f2 <HAL_RCC_OscConfig+0x10a>
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	4a91      	ldr	r2, [pc, #580]	; (800080c <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005c8:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ca:	4013      	ands	r3, r2
 80005cc:	6023      	str	r3, [r4, #0]
 80005ce:	6823      	ldr	r3, [r4, #0]
 80005d0:	4a8f      	ldr	r2, [pc, #572]	; (8000810 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005d2:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005d4:	4013      	ands	r3, r2
 80005d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005d8:	f7ff fe60 	bl	800029c <HAL_GetTick>
 80005dc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005de:	6823      	ldr	r3, [r4, #0]
 80005e0:	4233      	tst	r3, r6
 80005e2:	d100      	bne.n	80005e6 <HAL_RCC_OscConfig+0xfe>
 80005e4:	e786      	b.n	80004f4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e6:	f7ff fe59 	bl	800029c <HAL_GetTick>
 80005ea:	1bc0      	subs	r0, r0, r7
 80005ec:	2864      	cmp	r0, #100	; 0x64
 80005ee:	d9f6      	bls.n	80005de <HAL_RCC_OscConfig+0xf6>
 80005f0:	e7e4      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f2:	2b05      	cmp	r3, #5
 80005f4:	d105      	bne.n	8000602 <HAL_RCC_OscConfig+0x11a>
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	6822      	ldr	r2, [r4, #0]
 80005fa:	02db      	lsls	r3, r3, #11
 80005fc:	4313      	orrs	r3, r2
 80005fe:	6023      	str	r3, [r4, #0]
 8000600:	e7ca      	b.n	8000598 <HAL_RCC_OscConfig+0xb0>
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	4a81      	ldr	r2, [pc, #516]	; (800080c <HAL_RCC_OscConfig+0x324>)
 8000606:	4013      	ands	r3, r2
 8000608:	6023      	str	r3, [r4, #0]
 800060a:	6823      	ldr	r3, [r4, #0]
 800060c:	4a80      	ldr	r2, [pc, #512]	; (8000810 <HAL_RCC_OscConfig+0x328>)
 800060e:	4013      	ands	r3, r2
 8000610:	e7c6      	b.n	80005a0 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000612:	220c      	movs	r2, #12
 8000614:	4c7c      	ldr	r4, [pc, #496]	; (8000808 <HAL_RCC_OscConfig+0x320>)
 8000616:	6863      	ldr	r3, [r4, #4]
 8000618:	4213      	tst	r3, r2
 800061a:	d00b      	beq.n	8000634 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800061c:	6863      	ldr	r3, [r4, #4]
 800061e:	4013      	ands	r3, r2
 8000620:	2b08      	cmp	r3, #8
 8000622:	d115      	bne.n	8000650 <HAL_RCC_OscConfig+0x168>
 8000624:	22c0      	movs	r2, #192	; 0xc0
 8000626:	6863      	ldr	r3, [r4, #4]
 8000628:	0252      	lsls	r2, r2, #9
 800062a:	4013      	ands	r3, r2
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	0212      	lsls	r2, r2, #8
 8000630:	4293      	cmp	r3, r2
 8000632:	d10d      	bne.n	8000650 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000634:	6823      	ldr	r3, [r4, #0]
 8000636:	079b      	lsls	r3, r3, #30
 8000638:	d502      	bpl.n	8000640 <HAL_RCC_OscConfig+0x158>
 800063a:	68eb      	ldr	r3, [r5, #12]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d1a5      	bne.n	800058c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000640:	21f8      	movs	r1, #248	; 0xf8
 8000642:	6822      	ldr	r2, [r4, #0]
 8000644:	692b      	ldr	r3, [r5, #16]
 8000646:	438a      	bics	r2, r1
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	4313      	orrs	r3, r2
 800064c:	6023      	str	r3, [r4, #0]
 800064e:	e755      	b.n	80004fc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000650:	68ea      	ldr	r2, [r5, #12]
 8000652:	2301      	movs	r3, #1
 8000654:	2a00      	cmp	r2, #0
 8000656:	d00f      	beq.n	8000678 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000658:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800065a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800065c:	4313      	orrs	r3, r2
 800065e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000660:	f7ff fe1c 	bl	800029c <HAL_GetTick>
 8000664:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	4233      	tst	r3, r6
 800066a:	d1e9      	bne.n	8000640 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800066c:	f7ff fe16 	bl	800029c <HAL_GetTick>
 8000670:	1bc0      	subs	r0, r0, r7
 8000672:	2802      	cmp	r0, #2
 8000674:	d9f7      	bls.n	8000666 <HAL_RCC_OscConfig+0x17e>
 8000676:	e7a1      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000678:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800067a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800067c:	439a      	bics	r2, r3
 800067e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000680:	f7ff fe0c 	bl	800029c <HAL_GetTick>
 8000684:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000686:	6823      	ldr	r3, [r4, #0]
 8000688:	4233      	tst	r3, r6
 800068a:	d100      	bne.n	800068e <HAL_RCC_OscConfig+0x1a6>
 800068c:	e736      	b.n	80004fc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068e:	f7ff fe05 	bl	800029c <HAL_GetTick>
 8000692:	1bc0      	subs	r0, r0, r7
 8000694:	2802      	cmp	r0, #2
 8000696:	d9f6      	bls.n	8000686 <HAL_RCC_OscConfig+0x19e>
 8000698:	e790      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800069a:	69ea      	ldr	r2, [r5, #28]
 800069c:	2301      	movs	r3, #1
 800069e:	4c5a      	ldr	r4, [pc, #360]	; (8000808 <HAL_RCC_OscConfig+0x320>)
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d010      	beq.n	80006c6 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 80006a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006a6:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80006a8:	4313      	orrs	r3, r2
 80006aa:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006ac:	f7ff fdf6 	bl	800029c <HAL_GetTick>
 80006b0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006b4:	4233      	tst	r3, r6
 80006b6:	d000      	beq.n	80006ba <HAL_RCC_OscConfig+0x1d2>
 80006b8:	e724      	b.n	8000504 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006ba:	f7ff fdef 	bl	800029c <HAL_GetTick>
 80006be:	1bc0      	subs	r0, r0, r7
 80006c0:	2802      	cmp	r0, #2
 80006c2:	d9f6      	bls.n	80006b2 <HAL_RCC_OscConfig+0x1ca>
 80006c4:	e77a      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 80006c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006c8:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 80006ca:	439a      	bics	r2, r3
 80006cc:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80006ce:	f7ff fde5 	bl	800029c <HAL_GetTick>
 80006d2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006d6:	4233      	tst	r3, r6
 80006d8:	d100      	bne.n	80006dc <HAL_RCC_OscConfig+0x1f4>
 80006da:	e713      	b.n	8000504 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006dc:	f7ff fdde 	bl	800029c <HAL_GetTick>
 80006e0:	1bc0      	subs	r0, r0, r7
 80006e2:	2802      	cmp	r0, #2
 80006e4:	d9f6      	bls.n	80006d4 <HAL_RCC_OscConfig+0x1ec>
 80006e6:	e769      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006e8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80006ea:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006ec:	4c46      	ldr	r4, [pc, #280]	; (8000808 <HAL_RCC_OscConfig+0x320>)
 80006ee:	0552      	lsls	r2, r2, #21
 80006f0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80006f2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006f4:	4213      	tst	r3, r2
 80006f6:	d108      	bne.n	800070a <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	69e3      	ldr	r3, [r4, #28]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	61e3      	str	r3, [r4, #28]
 80006fe:	69e3      	ldr	r3, [r4, #28]
 8000700:	4013      	ands	r3, r2
 8000702:	9303      	str	r3, [sp, #12]
 8000704:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000706:	2301      	movs	r3, #1
 8000708:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800070a:	2780      	movs	r7, #128	; 0x80
 800070c:	4e41      	ldr	r6, [pc, #260]	; (8000814 <HAL_RCC_OscConfig+0x32c>)
 800070e:	007f      	lsls	r7, r7, #1
 8000710:	6833      	ldr	r3, [r6, #0]
 8000712:	423b      	tst	r3, r7
 8000714:	d006      	beq.n	8000724 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000716:	68ab      	ldr	r3, [r5, #8]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d113      	bne.n	8000744 <HAL_RCC_OscConfig+0x25c>
 800071c:	6a22      	ldr	r2, [r4, #32]
 800071e:	4313      	orrs	r3, r2
 8000720:	6223      	str	r3, [r4, #32]
 8000722:	e030      	b.n	8000786 <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000724:	6833      	ldr	r3, [r6, #0]
 8000726:	433b      	orrs	r3, r7
 8000728:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800072a:	f7ff fdb7 	bl	800029c <HAL_GetTick>
 800072e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000730:	6833      	ldr	r3, [r6, #0]
 8000732:	423b      	tst	r3, r7
 8000734:	d1ef      	bne.n	8000716 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000736:	f7ff fdb1 	bl	800029c <HAL_GetTick>
 800073a:	9b01      	ldr	r3, [sp, #4]
 800073c:	1ac0      	subs	r0, r0, r3
 800073e:	2864      	cmp	r0, #100	; 0x64
 8000740:	d9f6      	bls.n	8000730 <HAL_RCC_OscConfig+0x248>
 8000742:	e73b      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
 8000744:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000746:	2b00      	cmp	r3, #0
 8000748:	d114      	bne.n	8000774 <HAL_RCC_OscConfig+0x28c>
 800074a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800074c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800074e:	4393      	bics	r3, r2
 8000750:	6223      	str	r3, [r4, #32]
 8000752:	6a23      	ldr	r3, [r4, #32]
 8000754:	3203      	adds	r2, #3
 8000756:	4393      	bics	r3, r2
 8000758:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800075a:	f7ff fd9f 	bl	800029c <HAL_GetTick>
 800075e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000760:	6a23      	ldr	r3, [r4, #32]
 8000762:	423b      	tst	r3, r7
 8000764:	d025      	beq.n	80007b2 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000766:	f7ff fd99 	bl	800029c <HAL_GetTick>
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <HAL_RCC_OscConfig+0x330>)
 800076c:	1b80      	subs	r0, r0, r6
 800076e:	4298      	cmp	r0, r3
 8000770:	d9f6      	bls.n	8000760 <HAL_RCC_OscConfig+0x278>
 8000772:	e723      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000774:	2b05      	cmp	r3, #5
 8000776:	d10b      	bne.n	8000790 <HAL_RCC_OscConfig+0x2a8>
 8000778:	6a21      	ldr	r1, [r4, #32]
 800077a:	3b01      	subs	r3, #1
 800077c:	430b      	orrs	r3, r1
 800077e:	6223      	str	r3, [r4, #32]
 8000780:	6a23      	ldr	r3, [r4, #32]
 8000782:	431a      	orrs	r2, r3
 8000784:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000786:	f7ff fd89 	bl	800029c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800078a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800078c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800078e:	e00d      	b.n	80007ac <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000790:	6a23      	ldr	r3, [r4, #32]
 8000792:	4393      	bics	r3, r2
 8000794:	2204      	movs	r2, #4
 8000796:	6223      	str	r3, [r4, #32]
 8000798:	6a23      	ldr	r3, [r4, #32]
 800079a:	4393      	bics	r3, r2
 800079c:	e7c0      	b.n	8000720 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800079e:	f7ff fd7d 	bl	800029c <HAL_GetTick>
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <HAL_RCC_OscConfig+0x330>)
 80007a4:	1b80      	subs	r0, r0, r6
 80007a6:	4298      	cmp	r0, r3
 80007a8:	d900      	bls.n	80007ac <HAL_RCC_OscConfig+0x2c4>
 80007aa:	e707      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007ac:	6a23      	ldr	r3, [r4, #32]
 80007ae:	423b      	tst	r3, r7
 80007b0:	d0f5      	beq.n	800079e <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 80007b2:	9b00      	ldr	r3, [sp, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d000      	beq.n	80007ba <HAL_RCC_OscConfig+0x2d2>
 80007b8:	e6a8      	b.n	800050c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007ba:	69e3      	ldr	r3, [r4, #28]
 80007bc:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_RCC_OscConfig+0x334>)
 80007be:	4013      	ands	r3, r2
 80007c0:	61e3      	str	r3, [r4, #28]
 80007c2:	e6a3      	b.n	800050c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007c4:	f7ff fd6a 	bl	800029c <HAL_GetTick>
 80007c8:	1bc0      	subs	r0, r0, r7
 80007ca:	2802      	cmp	r0, #2
 80007cc:	d800      	bhi.n	80007d0 <HAL_RCC_OscConfig+0x2e8>
 80007ce:	e6b0      	b.n	8000532 <HAL_RCC_OscConfig+0x4a>
 80007d0:	e6f4      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80007d2:	3205      	adds	r2, #5
 80007d4:	d103      	bne.n	80007de <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 80007d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80007d8:	439a      	bics	r2, r3
 80007da:	6362      	str	r2, [r4, #52]	; 0x34
 80007dc:	e6ad      	b.n	800053a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 80007de:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007e0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80007e2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 80007e4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 80007e6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80007e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007ea:	4393      	bics	r3, r2
 80007ec:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80007ee:	f7ff fd55 	bl	800029c <HAL_GetTick>
 80007f2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007f6:	4233      	tst	r3, r6
 80007f8:	d100      	bne.n	80007fc <HAL_RCC_OscConfig+0x314>
 80007fa:	e6a5      	b.n	8000548 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007fc:	f7ff fd4e 	bl	800029c <HAL_GetTick>
 8000800:	1bc0      	subs	r0, r0, r7
 8000802:	2802      	cmp	r0, #2
 8000804:	d9f6      	bls.n	80007f4 <HAL_RCC_OscConfig+0x30c>
 8000806:	e6d9      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
 8000808:	40021000 	.word	0x40021000
 800080c:	fffeffff 	.word	0xfffeffff
 8000810:	fffbffff 	.word	0xfffbffff
 8000814:	40007000 	.word	0x40007000
 8000818:	00001388 	.word	0x00001388
 800081c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000820:	210c      	movs	r1, #12
 8000822:	4c46      	ldr	r4, [pc, #280]	; (800093c <HAL_RCC_OscConfig+0x454>)
 8000824:	6862      	ldr	r2, [r4, #4]
 8000826:	400a      	ands	r2, r1
 8000828:	428a      	cmp	r2, r1
 800082a:	d009      	beq.n	8000840 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000830:	2b08      	cmp	r3, #8
 8000832:	d10e      	bne.n	8000852 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000834:	22c0      	movs	r2, #192	; 0xc0
 8000836:	6863      	ldr	r3, [r4, #4]
 8000838:	0252      	lsls	r2, r2, #9
 800083a:	4013      	ands	r3, r2
 800083c:	4293      	cmp	r3, r2
 800083e:	d108      	bne.n	8000852 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000842:	03db      	lsls	r3, r3, #15
 8000844:	d400      	bmi.n	8000848 <HAL_RCC_OscConfig+0x360>
 8000846:	e683      	b.n	8000550 <HAL_RCC_OscConfig+0x68>
 8000848:	6a2b      	ldr	r3, [r5, #32]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d000      	beq.n	8000850 <HAL_RCC_OscConfig+0x368>
 800084e:	e69d      	b.n	800058c <HAL_RCC_OscConfig+0xa4>
 8000850:	e67e      	b.n	8000550 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000852:	6a2b      	ldr	r3, [r5, #32]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d011      	beq.n	800087c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000858:	2680      	movs	r6, #128	; 0x80
 800085a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800085c:	0276      	lsls	r6, r6, #9
 800085e:	4333      	orrs	r3, r6
 8000860:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000862:	f7ff fd1b 	bl	800029c <HAL_GetTick>
 8000866:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000868:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800086a:	4233      	tst	r3, r6
 800086c:	d000      	beq.n	8000870 <HAL_RCC_OscConfig+0x388>
 800086e:	e66f      	b.n	8000550 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000870:	f7ff fd14 	bl	800029c <HAL_GetTick>
 8000874:	1bc0      	subs	r0, r0, r7
 8000876:	2802      	cmp	r0, #2
 8000878:	d9f6      	bls.n	8000868 <HAL_RCC_OscConfig+0x380>
 800087a:	e69f      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 800087c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800087e:	4a30      	ldr	r2, [pc, #192]	; (8000940 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000880:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000882:	4013      	ands	r3, r2
 8000884:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000886:	f7ff fd09 	bl	800029c <HAL_GetTick>
 800088a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800088c:	0276      	lsls	r6, r6, #9
 800088e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000890:	4233      	tst	r3, r6
 8000892:	d100      	bne.n	8000896 <HAL_RCC_OscConfig+0x3ae>
 8000894:	e65c      	b.n	8000550 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000896:	f7ff fd01 	bl	800029c <HAL_GetTick>
 800089a:	1bc0      	subs	r0, r0, r7
 800089c:	2802      	cmp	r0, #2
 800089e:	d9f6      	bls.n	800088e <HAL_RCC_OscConfig+0x3a6>
 80008a0:	e68c      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008a2:	220c      	movs	r2, #12
 80008a4:	4c25      	ldr	r4, [pc, #148]	; (800093c <HAL_RCC_OscConfig+0x454>)
 80008a6:	6863      	ldr	r3, [r4, #4]
 80008a8:	4013      	ands	r3, r2
 80008aa:	2b08      	cmp	r3, #8
 80008ac:	d100      	bne.n	80008b0 <HAL_RCC_OscConfig+0x3c8>
 80008ae:	e66d      	b.n	800058c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	4a24      	ldr	r2, [pc, #144]	; (8000944 <HAL_RCC_OscConfig+0x45c>)
 80008b4:	4013      	ands	r3, r2
 80008b6:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008b8:	2902      	cmp	r1, #2
 80008ba:	d12f      	bne.n	800091c <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 80008bc:	f7ff fcee 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008c0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80008c2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008c4:	04b6      	lsls	r6, r6, #18
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	4233      	tst	r3, r6
 80008ca:	d121      	bne.n	8000910 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008cc:	220f      	movs	r2, #15
 80008ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008d0:	4393      	bics	r3, r2
 80008d2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80008d4:	4313      	orrs	r3, r2
 80008d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008d8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80008da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80008dc:	6862      	ldr	r2, [r4, #4]
 80008de:	430b      	orrs	r3, r1
 80008e0:	4919      	ldr	r1, [pc, #100]	; (8000948 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008e2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008e4:	400a      	ands	r2, r1
 80008e6:	4313      	orrs	r3, r2
 80008e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	6822      	ldr	r2, [r4, #0]
 80008ee:	045b      	lsls	r3, r3, #17
 80008f0:	4313      	orrs	r3, r2
 80008f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fcd2 	bl	800029c <HAL_GetTick>
 80008f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008fa:	04ad      	lsls	r5, r5, #18
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	422b      	tst	r3, r5
 8000900:	d000      	beq.n	8000904 <HAL_RCC_OscConfig+0x41c>
 8000902:	e629      	b.n	8000558 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000904:	f7ff fcca 	bl	800029c <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2802      	cmp	r0, #2
 800090c:	d9f6      	bls.n	80008fc <HAL_RCC_OscConfig+0x414>
 800090e:	e655      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000910:	f7ff fcc4 	bl	800029c <HAL_GetTick>
 8000914:	1bc0      	subs	r0, r0, r7
 8000916:	2802      	cmp	r0, #2
 8000918:	d9d5      	bls.n	80008c6 <HAL_RCC_OscConfig+0x3de>
 800091a:	e64f      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 800091c:	f7ff fcbe 	bl	800029c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000920:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000922:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000924:	04ad      	lsls	r5, r5, #18
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	422b      	tst	r3, r5
 800092a:	d100      	bne.n	800092e <HAL_RCC_OscConfig+0x446>
 800092c:	e614      	b.n	8000558 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800092e:	f7ff fcb5 	bl	800029c <HAL_GetTick>
 8000932:	1b80      	subs	r0, r0, r6
 8000934:	2802      	cmp	r0, #2
 8000936:	d9f6      	bls.n	8000926 <HAL_RCC_OscConfig+0x43e>
 8000938:	e640      	b.n	80005bc <HAL_RCC_OscConfig+0xd4>
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	40021000 	.word	0x40021000
 8000940:	fffeffff 	.word	0xfffeffff
 8000944:	feffffff 	.word	0xfeffffff
 8000948:	ffc27fff 	.word	0xffc27fff

0800094c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800094c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800094e:	4c19      	ldr	r4, [pc, #100]	; (80009b4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000950:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000952:	2210      	movs	r2, #16
 8000954:	0021      	movs	r1, r4
 8000956:	4668      	mov	r0, sp
 8000958:	f001 fa32 	bl	8001dc0 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800095c:	0021      	movs	r1, r4
 800095e:	ad04      	add	r5, sp, #16
 8000960:	2210      	movs	r2, #16
 8000962:	3110      	adds	r1, #16
 8000964:	0028      	movs	r0, r5
 8000966:	f001 fa2b 	bl	8001dc0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800096a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800096c:	4e12      	ldr	r6, [pc, #72]	; (80009b8 <HAL_RCC_GetSysClockFreq+0x6c>)
 800096e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000970:	401a      	ands	r2, r3
 8000972:	2a08      	cmp	r2, #8
 8000974:	d004      	beq.n	8000980 <HAL_RCC_GetSysClockFreq+0x34>
 8000976:	2a0c      	cmp	r2, #12
 8000978:	d11a      	bne.n	80009b0 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800097a:	4810      	ldr	r0, [pc, #64]	; (80009bc <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800097c:	b008      	add	sp, #32
 800097e:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000980:	200f      	movs	r0, #15
 8000982:	466a      	mov	r2, sp
 8000984:	0c99      	lsrs	r1, r3, #18
 8000986:	4001      	ands	r1, r0
 8000988:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800098a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800098c:	4002      	ands	r2, r0
 800098e:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000990:	22c0      	movs	r2, #192	; 0xc0
 8000992:	2080      	movs	r0, #128	; 0x80
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	4013      	ands	r3, r2
 8000998:	0240      	lsls	r0, r0, #9
 800099a:	4283      	cmp	r3, r0
 800099c:	d101      	bne.n	80009a2 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800099e:	4808      	ldr	r0, [pc, #32]	; (80009c0 <HAL_RCC_GetSysClockFreq+0x74>)
 80009a0:	e002      	b.n	80009a8 <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d1fb      	bne.n	800099e <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80009a8:	f7ff fbc2 	bl	8000130 <__udivsi3>
 80009ac:	4360      	muls	r0, r4
 80009ae:	e7e5      	b.n	800097c <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 80009b0:	4803      	ldr	r0, [pc, #12]	; (80009c0 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80009b2:	e7e3      	b.n	800097c <HAL_RCC_GetSysClockFreq+0x30>
 80009b4:	08001dfc 	.word	0x08001dfc
 80009b8:	40021000 	.word	0x40021000
 80009bc:	02dc6c00 	.word	0x02dc6c00
 80009c0:	007a1200 	.word	0x007a1200

080009c4 <HAL_RCC_ClockConfig>:
{
 80009c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009c6:	2201      	movs	r2, #1
 80009c8:	4c4f      	ldr	r4, [pc, #316]	; (8000b08 <HAL_RCC_ClockConfig+0x144>)
{
 80009ca:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009cc:	6823      	ldr	r3, [r4, #0]
{
 80009ce:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009d0:	4013      	ands	r3, r2
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d31f      	bcc.n	8000a16 <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009d6:	6832      	ldr	r2, [r6, #0]
 80009d8:	0793      	lsls	r3, r2, #30
 80009da:	d428      	bmi.n	8000a2e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009dc:	07d3      	lsls	r3, r2, #31
 80009de:	d42e      	bmi.n	8000a3e <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80009e0:	2301      	movs	r3, #1
 80009e2:	6822      	ldr	r2, [r4, #0]
 80009e4:	9901      	ldr	r1, [sp, #4]
 80009e6:	401a      	ands	r2, r3
 80009e8:	4291      	cmp	r1, r2
 80009ea:	d200      	bcs.n	80009ee <HAL_RCC_ClockConfig+0x2a>
 80009ec:	e07e      	b.n	8000aec <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009ee:	6833      	ldr	r3, [r6, #0]
 80009f0:	4c46      	ldr	r4, [pc, #280]	; (8000b0c <HAL_RCC_ClockConfig+0x148>)
 80009f2:	075b      	lsls	r3, r3, #29
 80009f4:	d500      	bpl.n	80009f8 <HAL_RCC_ClockConfig+0x34>
 80009f6:	e080      	b.n	8000afa <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80009f8:	f7ff ffa8 	bl	800094c <HAL_RCC_GetSysClockFreq>
 80009fc:	6863      	ldr	r3, [r4, #4]
 80009fe:	4a44      	ldr	r2, [pc, #272]	; (8000b10 <HAL_RCC_ClockConfig+0x14c>)
 8000a00:	061b      	lsls	r3, r3, #24
 8000a02:	0f1b      	lsrs	r3, r3, #28
 8000a04:	5cd3      	ldrb	r3, [r2, r3]
 8000a06:	40d8      	lsrs	r0, r3
 8000a08:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <HAL_RCC_ClockConfig+0x150>)
 8000a0a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fc1b 	bl	8000248 <HAL_InitTick>
  return HAL_OK;
 8000a12:	2000      	movs	r0, #0
 8000a14:	e00a      	b.n	8000a2c <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	9901      	ldr	r1, [sp, #4]
 8000a1a:	4393      	bics	r3, r2
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	4013      	ands	r3, r2
 8000a24:	9a01      	ldr	r2, [sp, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d0d5      	beq.n	80009d6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
}
 8000a2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a2e:	20f0      	movs	r0, #240	; 0xf0
 8000a30:	4936      	ldr	r1, [pc, #216]	; (8000b0c <HAL_RCC_ClockConfig+0x148>)
 8000a32:	684b      	ldr	r3, [r1, #4]
 8000a34:	4383      	bics	r3, r0
 8000a36:	68b0      	ldr	r0, [r6, #8]
 8000a38:	4303      	orrs	r3, r0
 8000a3a:	604b      	str	r3, [r1, #4]
 8000a3c:	e7ce      	b.n	80009dc <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a3e:	6872      	ldr	r2, [r6, #4]
 8000a40:	4d32      	ldr	r5, [pc, #200]	; (8000b0c <HAL_RCC_ClockConfig+0x148>)
 8000a42:	2a01      	cmp	r2, #1
 8000a44:	d11a      	bne.n	8000a7c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a46:	682b      	ldr	r3, [r5, #0]
 8000a48:	039b      	lsls	r3, r3, #14
 8000a4a:	d5ee      	bpl.n	8000a2a <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	686b      	ldr	r3, [r5, #4]
 8000a50:	438b      	bics	r3, r1
 8000a52:	4313      	orrs	r3, r2
 8000a54:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000a56:	f7ff fc21 	bl	800029c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a5a:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000a5c:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d11c      	bne.n	8000a9c <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a62:	220c      	movs	r2, #12
 8000a64:	686b      	ldr	r3, [r5, #4]
 8000a66:	4013      	ands	r3, r2
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d0b9      	beq.n	80009e0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a6c:	f7ff fc16 	bl	800029c <HAL_GetTick>
 8000a70:	4b29      	ldr	r3, [pc, #164]	; (8000b18 <HAL_RCC_ClockConfig+0x154>)
 8000a72:	1bc0      	subs	r0, r0, r7
 8000a74:	4298      	cmp	r0, r3
 8000a76:	d9f4      	bls.n	8000a62 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000a78:	2003      	movs	r0, #3
 8000a7a:	e7d7      	b.n	8000a2c <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a7c:	2a02      	cmp	r2, #2
 8000a7e:	d103      	bne.n	8000a88 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	019b      	lsls	r3, r3, #6
 8000a84:	d4e2      	bmi.n	8000a4c <HAL_RCC_ClockConfig+0x88>
 8000a86:	e7d0      	b.n	8000a2a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000a88:	2a03      	cmp	r2, #3
 8000a8a:	d103      	bne.n	8000a94 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000a8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a8e:	03db      	lsls	r3, r3, #15
 8000a90:	d4dc      	bmi.n	8000a4c <HAL_RCC_ClockConfig+0x88>
 8000a92:	e7ca      	b.n	8000a2a <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a94:	682b      	ldr	r3, [r5, #0]
 8000a96:	079b      	lsls	r3, r3, #30
 8000a98:	d4d8      	bmi.n	8000a4c <HAL_RCC_ClockConfig+0x88>
 8000a9a:	e7c6      	b.n	8000a2a <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d10b      	bne.n	8000ab8 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aa0:	220c      	movs	r2, #12
 8000aa2:	686b      	ldr	r3, [r5, #4]
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d09a      	beq.n	80009e0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aaa:	f7ff fbf7 	bl	800029c <HAL_GetTick>
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <HAL_RCC_ClockConfig+0x154>)
 8000ab0:	1bc0      	subs	r0, r0, r7
 8000ab2:	4298      	cmp	r0, r3
 8000ab4:	d9f4      	bls.n	8000aa0 <HAL_RCC_ClockConfig+0xdc>
 8000ab6:	e7df      	b.n	8000a78 <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000ab8:	2b03      	cmp	r3, #3
 8000aba:	d011      	beq.n	8000ae0 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000abc:	220c      	movs	r2, #12
 8000abe:	686b      	ldr	r3, [r5, #4]
 8000ac0:	4213      	tst	r3, r2
 8000ac2:	d100      	bne.n	8000ac6 <HAL_RCC_ClockConfig+0x102>
 8000ac4:	e78c      	b.n	80009e0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac6:	f7ff fbe9 	bl	800029c <HAL_GetTick>
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_RCC_ClockConfig+0x154>)
 8000acc:	1bc0      	subs	r0, r0, r7
 8000ace:	4298      	cmp	r0, r3
 8000ad0:	d9f4      	bls.n	8000abc <HAL_RCC_ClockConfig+0xf8>
 8000ad2:	e7d1      	b.n	8000a78 <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ad4:	f7ff fbe2 	bl	800029c <HAL_GetTick>
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_RCC_ClockConfig+0x154>)
 8000ada:	1bc0      	subs	r0, r0, r7
 8000adc:	4298      	cmp	r0, r3
 8000ade:	d8cb      	bhi.n	8000a78 <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	686b      	ldr	r3, [r5, #4]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d1f4      	bne.n	8000ad4 <HAL_RCC_ClockConfig+0x110>
 8000aea:	e779      	b.n	80009e0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aec:	6822      	ldr	r2, [r4, #0]
 8000aee:	439a      	bics	r2, r3
 8000af0:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000af2:	6822      	ldr	r2, [r4, #0]
 8000af4:	421a      	tst	r2, r3
 8000af6:	d198      	bne.n	8000a2a <HAL_RCC_ClockConfig+0x66>
 8000af8:	e779      	b.n	80009ee <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000afa:	6863      	ldr	r3, [r4, #4]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_RCC_ClockConfig+0x158>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	68f2      	ldr	r2, [r6, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	6063      	str	r3, [r4, #4]
 8000b06:	e777      	b.n	80009f8 <HAL_RCC_ClockConfig+0x34>
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	08001e20 	.word	0x08001e20
 8000b14:	20000000 	.word	0x20000000
 8000b18:	00001388 	.word	0x00001388
 8000b1c:	fffff8ff 	.word	0xfffff8ff

08000b20 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000b20:	4b01      	ldr	r3, [pc, #4]	; (8000b28 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b22:	6818      	ldr	r0, [r3, #0]
}
 8000b24:	4770      	bx	lr
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	20000000 	.word	0x20000000

08000b2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	055b      	lsls	r3, r3, #21
 8000b34:	0f5b      	lsrs	r3, r3, #29
 8000b36:	5cd3      	ldrb	r3, [r2, r3]
 8000b38:	4a03      	ldr	r2, [pc, #12]	; (8000b48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b3a:	6810      	ldr	r0, [r2, #0]
 8000b3c:	40d8      	lsrs	r0, r3
}    
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000
 8000b44:	08001e30 	.word	0x08001e30
 8000b48:	20000000 	.word	0x20000000

08000b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b4e:	6803      	ldr	r3, [r0, #0]
{
 8000b50:	b085      	sub	sp, #20
 8000b52:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b54:	03db      	lsls	r3, r3, #15
 8000b56:	d528      	bpl.n	8000baa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b58:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b5a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b5c:	4c40      	ldr	r4, [pc, #256]	; (8000c60 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000b5e:	0552      	lsls	r2, r2, #21
 8000b60:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000b62:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b64:	4213      	tst	r3, r2
 8000b66:	d108      	bne.n	8000b7a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	69e3      	ldr	r3, [r4, #28]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	61e3      	str	r3, [r4, #28]
 8000b6e:	69e3      	ldr	r3, [r4, #28]
 8000b70:	4013      	ands	r3, r2
 8000b72:	9303      	str	r3, [sp, #12]
 8000b74:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b76:	2301      	movs	r3, #1
 8000b78:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b7a:	2780      	movs	r7, #128	; 0x80
 8000b7c:	4e39      	ldr	r6, [pc, #228]	; (8000c64 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8000b7e:	007f      	lsls	r7, r7, #1
 8000b80:	6833      	ldr	r3, [r6, #0]
 8000b82:	423b      	tst	r3, r7
 8000b84:	d038      	beq.n	8000bf8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000b86:	22c0      	movs	r2, #192	; 0xc0
 8000b88:	6a23      	ldr	r3, [r4, #32]
 8000b8a:	0092      	lsls	r2, r2, #2
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	4e36      	ldr	r6, [pc, #216]	; (8000c68 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b90:	d144      	bne.n	8000c1c <HAL_RCCEx_PeriphCLKConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000b92:	6a23      	ldr	r3, [r4, #32]
 8000b94:	401e      	ands	r6, r3
 8000b96:	686b      	ldr	r3, [r5, #4]
 8000b98:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000b9a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000b9c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d103      	bne.n	8000baa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ba2:	69e3      	ldr	r3, [r4, #28]
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000baa:	682a      	ldr	r2, [r5, #0]
 8000bac:	07d3      	lsls	r3, r2, #31
 8000bae:	d506      	bpl.n	8000bbe <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	492b      	ldr	r1, [pc, #172]	; (8000c60 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000bb4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000bb6:	4383      	bics	r3, r0
 8000bb8:	68a8      	ldr	r0, [r5, #8]
 8000bba:	4303      	orrs	r3, r0
 8000bbc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000bbe:	0693      	lsls	r3, r2, #26
 8000bc0:	d506      	bpl.n	8000bd0 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000bc2:	2010      	movs	r0, #16
 8000bc4:	4926      	ldr	r1, [pc, #152]	; (8000c60 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000bc6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000bc8:	4383      	bics	r3, r0
 8000bca:	68e8      	ldr	r0, [r5, #12]
 8000bcc:	4303      	orrs	r3, r0
 8000bce:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000bd0:	0393      	lsls	r3, r2, #14
 8000bd2:	d506      	bpl.n	8000be2 <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000bd4:	2080      	movs	r0, #128	; 0x80
 8000bd6:	4922      	ldr	r1, [pc, #136]	; (8000c60 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000bd8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000bda:	4383      	bics	r3, r0
 8000bdc:	6968      	ldr	r0, [r5, #20]
 8000bde:	4303      	orrs	r3, r0
 8000be0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000be2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000be4:	0553      	lsls	r3, r2, #21
 8000be6:	d517      	bpl.n	8000c18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000be8:	2140      	movs	r1, #64	; 0x40
 8000bea:	4a1d      	ldr	r2, [pc, #116]	; (8000c60 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000bec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bee:	438b      	bics	r3, r1
 8000bf0:	6929      	ldr	r1, [r5, #16]
 8000bf2:	430b      	orrs	r3, r1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	e00f      	b.n	8000c18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bf8:	6833      	ldr	r3, [r6, #0]
 8000bfa:	433b      	orrs	r3, r7
 8000bfc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000bfe:	f7ff fb4d 	bl	800029c <HAL_GetTick>
 8000c02:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c04:	6833      	ldr	r3, [r6, #0]
 8000c06:	423b      	tst	r3, r7
 8000c08:	d1bd      	bne.n	8000b86 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c0a:	f7ff fb47 	bl	800029c <HAL_GetTick>
 8000c0e:	9b01      	ldr	r3, [sp, #4]
 8000c10:	1ac0      	subs	r0, r0, r3
 8000c12:	2864      	cmp	r0, #100	; 0x64
 8000c14:	d9f6      	bls.n	8000c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8000c16:	2003      	movs	r0, #3
}
 8000c18:	b005      	add	sp, #20
 8000c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c1c:	6869      	ldr	r1, [r5, #4]
 8000c1e:	400a      	ands	r2, r1
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d0b6      	beq.n	8000b92 <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c24:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c26:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c28:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c2a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c2c:	025b      	lsls	r3, r3, #9
 8000c2e:	4303      	orrs	r3, r0
 8000c30:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c32:	6a23      	ldr	r3, [r4, #32]
 8000c34:	480e      	ldr	r0, [pc, #56]	; (8000c70 <HAL_RCCEx_PeriphCLKConfig+0x124>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c36:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c38:	4003      	ands	r3, r0
 8000c3a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000c3c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c3e:	07d3      	lsls	r3, r2, #31
 8000c40:	d5a7      	bpl.n	8000b92 <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000c42:	f7ff fb2b 	bl	800029c <HAL_GetTick>
 8000c46:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	6a23      	ldr	r3, [r4, #32]
 8000c4c:	4213      	tst	r3, r2
 8000c4e:	d1a0      	bne.n	8000b92 <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c50:	f7ff fb24 	bl	800029c <HAL_GetTick>
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8000c56:	1bc0      	subs	r0, r0, r7
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d9f5      	bls.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8000c5c:	e7db      	b.n	8000c16 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40007000 	.word	0x40007000
 8000c68:	fffffcff 	.word	0xfffffcff
 8000c6c:	efffffff 	.word	0xefffffff
 8000c70:	fffeffff 	.word	0xfffeffff
 8000c74:	00001388 	.word	0x00001388

08000c78 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c78:	2201      	movs	r2, #1
 8000c7a:	6a03      	ldr	r3, [r0, #32]
{
 8000c7c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000c7e:	4393      	bics	r3, r2
 8000c80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000c86:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000c88:	3272      	adds	r2, #114	; 0x72
 8000c8a:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000c8c:	680a      	ldr	r2, [r1, #0]
 8000c8e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000c90:	2202      	movs	r2, #2
 8000c92:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000c94:	688a      	ldr	r2, [r1, #8]
 8000c96:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000c98:	4a11      	ldr	r2, [pc, #68]	; (8000ce0 <TIM_OC1_SetConfig+0x68>)
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d005      	beq.n	8000caa <TIM_OC1_SetConfig+0x32>
 8000c9e:	4e11      	ldr	r6, [pc, #68]	; (8000ce4 <TIM_OC1_SetConfig+0x6c>)
 8000ca0:	42b0      	cmp	r0, r6
 8000ca2:	d002      	beq.n	8000caa <TIM_OC1_SetConfig+0x32>
 8000ca4:	4e10      	ldr	r6, [pc, #64]	; (8000ce8 <TIM_OC1_SetConfig+0x70>)
 8000ca6:	42b0      	cmp	r0, r6
 8000ca8:	d113      	bne.n	8000cd2 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000caa:	2608      	movs	r6, #8
 8000cac:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000cae:	68ce      	ldr	r6, [r1, #12]
 8000cb0:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8000cb2:	2604      	movs	r6, #4
 8000cb4:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d005      	beq.n	8000cc6 <TIM_OC1_SetConfig+0x4e>
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <TIM_OC1_SetConfig+0x6c>)
 8000cbc:	4290      	cmp	r0, r2
 8000cbe:	d002      	beq.n	8000cc6 <TIM_OC1_SetConfig+0x4e>
 8000cc0:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <TIM_OC1_SetConfig+0x70>)
 8000cc2:	4290      	cmp	r0, r2
 8000cc4:	d105      	bne.n	8000cd2 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000cc6:	4a09      	ldr	r2, [pc, #36]	; (8000cec <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000cc8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000cca:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ccc:	694c      	ldr	r4, [r1, #20]
 8000cce:	4334      	orrs	r4, r6
 8000cd0:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000cd2:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000cd4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000cd6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000cd8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000cda:	6203      	str	r3, [r0, #32]
}
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40012c00 	.word	0x40012c00
 8000ce4:	40014400 	.word	0x40014400
 8000ce8:	40014800 	.word	0x40014800
 8000cec:	fffffcff 	.word	0xfffffcff

08000cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000cf0:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000cf2:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000cf4:	6a03      	ldr	r3, [r0, #32]
 8000cf6:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <TIM_OC3_SetConfig+0x60>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000cfc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000cfe:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000d00:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000d02:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000d04:	680d      	ldr	r5, [r1, #0]
 8000d06:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000d08:	4d12      	ldr	r5, [pc, #72]	; (8000d54 <TIM_OC3_SetConfig+0x64>)
 8000d0a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000d0c:	688d      	ldr	r5, [r1, #8]
 8000d0e:	022d      	lsls	r5, r5, #8
 8000d10:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000d12:	4d11      	ldr	r5, [pc, #68]	; (8000d58 <TIM_OC3_SetConfig+0x68>)
 8000d14:	42a8      	cmp	r0, r5
 8000d16:	d10e      	bne.n	8000d36 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000d18:	4d10      	ldr	r5, [pc, #64]	; (8000d5c <TIM_OC3_SetConfig+0x6c>)
 8000d1a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000d1c:	68cb      	ldr	r3, [r1, #12]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000d22:	4d0f      	ldr	r5, [pc, #60]	; (8000d60 <TIM_OC3_SetConfig+0x70>)
 8000d24:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000d26:	4d0f      	ldr	r5, [pc, #60]	; (8000d64 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d28:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000d2a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000d2c:	698a      	ldr	r2, [r1, #24]
 8000d2e:	4332      	orrs	r2, r6
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	432a      	orrs	r2, r5
 8000d34:	e005      	b.n	8000d42 <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000d36:	4d0c      	ldr	r5, [pc, #48]	; (8000d68 <TIM_OC3_SetConfig+0x78>)
 8000d38:	42a8      	cmp	r0, r5
 8000d3a:	d0f4      	beq.n	8000d26 <TIM_OC3_SetConfig+0x36>
 8000d3c:	4d0b      	ldr	r5, [pc, #44]	; (8000d6c <TIM_OC3_SetConfig+0x7c>)
 8000d3e:	42a8      	cmp	r0, r5
 8000d40:	d0f1      	beq.n	8000d26 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d42:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000d44:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000d46:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000d48:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d4a:	6203      	str	r3, [r0, #32]
}
 8000d4c:	bd70      	pop	{r4, r5, r6, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	fffffeff 	.word	0xfffffeff
 8000d54:	fffffdff 	.word	0xfffffdff
 8000d58:	40012c00 	.word	0x40012c00
 8000d5c:	fffff7ff 	.word	0xfffff7ff
 8000d60:	fffffbff 	.word	0xfffffbff
 8000d64:	ffffcfff 	.word	0xffffcfff
 8000d68:	40014400 	.word	0x40014400
 8000d6c:	40014800 	.word	0x40014800

08000d70 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000d70:	6a03      	ldr	r3, [r0, #32]
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <TIM_OC4_SetConfig+0x4c>)
{
 8000d74:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000d76:	4013      	ands	r3, r2
 8000d78:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000d7a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000d7c:	4c10      	ldr	r4, [pc, #64]	; (8000dc0 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8000d7e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000d80:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000d82:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d84:	680c      	ldr	r4, [r1, #0]
 8000d86:	0224      	lsls	r4, r4, #8
 8000d88:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000d8a:	4c0e      	ldr	r4, [pc, #56]	; (8000dc4 <TIM_OC4_SetConfig+0x54>)
 8000d8c:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000d8e:	688c      	ldr	r4, [r1, #8]
 8000d90:	0324      	lsls	r4, r4, #12
 8000d92:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000d94:	4c0c      	ldr	r4, [pc, #48]	; (8000dc8 <TIM_OC4_SetConfig+0x58>)
 8000d96:	42a0      	cmp	r0, r4
 8000d98:	d005      	beq.n	8000da6 <TIM_OC4_SetConfig+0x36>
 8000d9a:	4c0c      	ldr	r4, [pc, #48]	; (8000dcc <TIM_OC4_SetConfig+0x5c>)
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	d002      	beq.n	8000da6 <TIM_OC4_SetConfig+0x36>
 8000da0:	4c0b      	ldr	r4, [pc, #44]	; (8000dd0 <TIM_OC4_SetConfig+0x60>)
 8000da2:	42a0      	cmp	r0, r4
 8000da4:	d104      	bne.n	8000db0 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000da6:	4c0b      	ldr	r4, [pc, #44]	; (8000dd4 <TIM_OC4_SetConfig+0x64>)
 8000da8:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000daa:	694c      	ldr	r4, [r1, #20]
 8000dac:	01a4      	lsls	r4, r4, #6
 8000dae:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000db0:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000db2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000db4:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000db6:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000db8:	6202      	str	r2, [r0, #32]
}
 8000dba:	bd30      	pop	{r4, r5, pc}
 8000dbc:	ffffefff 	.word	0xffffefff
 8000dc0:	ffff8cff 	.word	0xffff8cff
 8000dc4:	ffffdfff 	.word	0xffffdfff
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	40014400 	.word	0x40014400
 8000dd0:	40014800 	.word	0x40014800
 8000dd4:	ffffbfff 	.word	0xffffbfff

08000dd8 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	6803      	ldr	r3, [r0, #0]
 8000ddc:	68d9      	ldr	r1, [r3, #12]
}
 8000dde:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000de0:	4311      	orrs	r1, r2
 8000de2:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	4770      	bx	lr

08000dec <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000dec:	2101      	movs	r1, #1
 8000dee:	6803      	ldr	r3, [r0, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	438a      	bics	r2, r1
 8000df4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8000df6:	6a18      	ldr	r0, [r3, #32]
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_TIM_Base_Stop_IT+0x24>)
 8000dfa:	4210      	tst	r0, r2
 8000dfc:	d106      	bne.n	8000e0c <HAL_TIM_Base_Stop_IT+0x20>
 8000dfe:	6a18      	ldr	r0, [r3, #32]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_TIM_Base_Stop_IT+0x28>)
 8000e02:	4210      	tst	r0, r2
 8000e04:	d102      	bne.n	8000e0c <HAL_TIM_Base_Stop_IT+0x20>
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	438a      	bics	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	4770      	bx	lr
 8000e10:	00001111 	.word	0x00001111
 8000e14:	00000444 	.word	0x00000444

08000e18 <HAL_TIM_PWM_MspInit>:
 8000e18:	4770      	bx	lr

08000e1a <HAL_TIM_OC_DelayElapsedCallback>:
 8000e1a:	4770      	bx	lr

08000e1c <HAL_TIM_IC_CaptureCallback>:
 8000e1c:	4770      	bx	lr

08000e1e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e1e:	4770      	bx	lr

08000e20 <HAL_TIM_TriggerCallback>:
 8000e20:	4770      	bx	lr

08000e22 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e22:	2202      	movs	r2, #2
 8000e24:	6803      	ldr	r3, [r0, #0]
{
 8000e26:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e28:	6919      	ldr	r1, [r3, #16]
{
 8000e2a:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e2c:	4211      	tst	r1, r2
 8000e2e:	d00e      	beq.n	8000e4e <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000e30:	68d9      	ldr	r1, [r3, #12]
 8000e32:	4211      	tst	r1, r2
 8000e34:	d00b      	beq.n	8000e4e <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e36:	3a05      	subs	r2, #5
 8000e38:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e3a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e3c:	3204      	adds	r2, #4
 8000e3e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e40:	079b      	lsls	r3, r3, #30
 8000e42:	d100      	bne.n	8000e46 <HAL_TIM_IRQHandler+0x24>
 8000e44:	e079      	b.n	8000f3a <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8000e46:	f7ff ffe9 	bl	8000e1c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	6823      	ldr	r3, [r4, #0]
 8000e52:	6919      	ldr	r1, [r3, #16]
 8000e54:	4211      	tst	r1, r2
 8000e56:	d010      	beq.n	8000e7a <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000e58:	68d9      	ldr	r1, [r3, #12]
 8000e5a:	4211      	tst	r1, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e5e:	3a09      	subs	r2, #9
 8000e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e62:	3207      	adds	r2, #7
 8000e64:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e66:	699a      	ldr	r2, [r3, #24]
 8000e68:	23c0      	movs	r3, #192	; 0xc0
 8000e6a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8000e6c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e6e:	421a      	tst	r2, r3
 8000e70:	d069      	beq.n	8000f46 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e72:	f7ff ffd3 	bl	8000e1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e76:	2300      	movs	r3, #0
 8000e78:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e7a:	2208      	movs	r2, #8
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	6919      	ldr	r1, [r3, #16]
 8000e80:	4211      	tst	r1, r2
 8000e82:	d00e      	beq.n	8000ea2 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e84:	68d9      	ldr	r1, [r3, #12]
 8000e86:	4211      	tst	r1, r2
 8000e88:	d00b      	beq.n	8000ea2 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e8a:	3a11      	subs	r2, #17
 8000e8c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e8e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e90:	320d      	adds	r2, #13
 8000e92:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8000e94:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e96:	079b      	lsls	r3, r3, #30
 8000e98:	d05b      	beq.n	8000f52 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e9a:	f7ff ffbf 	bl	8000e1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ea2:	2210      	movs	r2, #16
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	6919      	ldr	r1, [r3, #16]
 8000ea8:	4211      	tst	r1, r2
 8000eaa:	d010      	beq.n	8000ece <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000eac:	68d9      	ldr	r1, [r3, #12]
 8000eae:	4211      	tst	r1, r2
 8000eb0:	d00d      	beq.n	8000ece <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000eb2:	3a21      	subs	r2, #33	; 0x21
 8000eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000eb6:	3219      	adds	r2, #25
 8000eb8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000eba:	69da      	ldr	r2, [r3, #28]
 8000ebc:	23c0      	movs	r3, #192	; 0xc0
 8000ebe:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8000ec0:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ec2:	421a      	tst	r2, r3
 8000ec4:	d04b      	beq.n	8000f5e <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ec6:	f7ff ffa9 	bl	8000e1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	6919      	ldr	r1, [r3, #16]
 8000ed4:	4211      	tst	r1, r2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000ed8:	68d9      	ldr	r1, [r3, #12]
 8000eda:	4211      	tst	r1, r2
 8000edc:	d004      	beq.n	8000ee8 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ede:	3a03      	subs	r2, #3
 8000ee0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f000 fc70 	bl	80017c8 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	6919      	ldr	r1, [r3, #16]
 8000eee:	4211      	tst	r1, r2
 8000ef0:	d008      	beq.n	8000f04 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000ef2:	68d9      	ldr	r1, [r3, #12]
 8000ef4:	4211      	tst	r1, r2
 8000ef6:	d005      	beq.n	8000f04 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ef8:	3a02      	subs	r2, #2
 8000efa:	3aff      	subs	r2, #255	; 0xff
 8000efc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000efe:	0020      	movs	r0, r4
 8000f00:	f000 fa68 	bl	80013d4 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f04:	2240      	movs	r2, #64	; 0x40
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	6919      	ldr	r1, [r3, #16]
 8000f0a:	4211      	tst	r1, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000f0e:	68d9      	ldr	r1, [r3, #12]
 8000f10:	4211      	tst	r1, r2
 8000f12:	d004      	beq.n	8000f1e <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f14:	3a81      	subs	r2, #129	; 0x81
 8000f16:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f18:	0020      	movs	r0, r4
 8000f1a:	f7ff ff81 	bl	8000e20 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f1e:	2220      	movs	r2, #32
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	6919      	ldr	r1, [r3, #16]
 8000f24:	4211      	tst	r1, r2
 8000f26:	d007      	beq.n	8000f38 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000f28:	68d9      	ldr	r1, [r3, #12]
 8000f2a:	4211      	tst	r1, r2
 8000f2c:	d004      	beq.n	8000f38 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f2e:	3a41      	subs	r2, #65	; 0x41
 8000f30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000f32:	0020      	movs	r0, r4
 8000f34:	f000 fa4d 	bl	80013d2 <HAL_TIMEx_CommutationCallback>
}
 8000f38:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f3a:	f7ff ff6e 	bl	8000e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f3e:	0020      	movs	r0, r4
 8000f40:	f7ff ff6d 	bl	8000e1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000f44:	e781      	b.n	8000e4a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f46:	f7ff ff68 	bl	8000e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f4a:	0020      	movs	r0, r4
 8000f4c:	f7ff ff67 	bl	8000e1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000f50:	e791      	b.n	8000e76 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f52:	f7ff ff62 	bl	8000e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f56:	0020      	movs	r0, r4
 8000f58:	f7ff ff61 	bl	8000e1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000f5c:	e79f      	b.n	8000e9e <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f5e:	f7ff ff5c 	bl	8000e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f62:	0020      	movs	r0, r4
 8000f64:	f7ff ff5b 	bl	8000e1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000f68:	e7af      	b.n	8000eca <HAL_TIM_IRQHandler+0xa8>
	...

08000f6c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <TIM_Base_SetConfig+0x78>)
{
 8000f6e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8000f70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f72:	4290      	cmp	r0, r2
 8000f74:	d006      	beq.n	8000f84 <TIM_Base_SetConfig+0x18>
 8000f76:	2480      	movs	r4, #128	; 0x80
 8000f78:	05e4      	lsls	r4, r4, #23
 8000f7a:	42a0      	cmp	r0, r4
 8000f7c:	d002      	beq.n	8000f84 <TIM_Base_SetConfig+0x18>
 8000f7e:	4c1a      	ldr	r4, [pc, #104]	; (8000fe8 <TIM_Base_SetConfig+0x7c>)
 8000f80:	42a0      	cmp	r0, r4
 8000f82:	d10c      	bne.n	8000f9e <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f84:	2470      	movs	r4, #112	; 0x70
 8000f86:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8000f88:	684c      	ldr	r4, [r1, #4]
 8000f8a:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f8c:	4290      	cmp	r0, r2
 8000f8e:	d00f      	beq.n	8000fb0 <TIM_Base_SetConfig+0x44>
 8000f90:	2480      	movs	r4, #128	; 0x80
 8000f92:	05e4      	lsls	r4, r4, #23
 8000f94:	42a0      	cmp	r0, r4
 8000f96:	d00b      	beq.n	8000fb0 <TIM_Base_SetConfig+0x44>
 8000f98:	4c13      	ldr	r4, [pc, #76]	; (8000fe8 <TIM_Base_SetConfig+0x7c>)
 8000f9a:	42a0      	cmp	r0, r4
 8000f9c:	d008      	beq.n	8000fb0 <TIM_Base_SetConfig+0x44>
 8000f9e:	4c13      	ldr	r4, [pc, #76]	; (8000fec <TIM_Base_SetConfig+0x80>)
 8000fa0:	42a0      	cmp	r0, r4
 8000fa2:	d005      	beq.n	8000fb0 <TIM_Base_SetConfig+0x44>
 8000fa4:	4c12      	ldr	r4, [pc, #72]	; (8000ff0 <TIM_Base_SetConfig+0x84>)
 8000fa6:	42a0      	cmp	r0, r4
 8000fa8:	d002      	beq.n	8000fb0 <TIM_Base_SetConfig+0x44>
 8000faa:	4c12      	ldr	r4, [pc, #72]	; (8000ff4 <TIM_Base_SetConfig+0x88>)
 8000fac:	42a0      	cmp	r0, r4
 8000fae:	d103      	bne.n	8000fb8 <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8000fb0:	4c11      	ldr	r4, [pc, #68]	; (8000ff8 <TIM_Base_SetConfig+0x8c>)
 8000fb2:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000fb4:	68cc      	ldr	r4, [r1, #12]
 8000fb6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000fb8:	2480      	movs	r4, #128	; 0x80
 8000fba:	43a3      	bics	r3, r4
 8000fbc:	694c      	ldr	r4, [r1, #20]
 8000fbe:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8000fc0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fc2:	688b      	ldr	r3, [r1, #8]
 8000fc4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000fc6:	680b      	ldr	r3, [r1, #0]
 8000fc8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fca:	4290      	cmp	r0, r2
 8000fcc:	d005      	beq.n	8000fda <TIM_Base_SetConfig+0x6e>
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <TIM_Base_SetConfig+0x84>)
 8000fd0:	4298      	cmp	r0, r3
 8000fd2:	d002      	beq.n	8000fda <TIM_Base_SetConfig+0x6e>
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <TIM_Base_SetConfig+0x88>)
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	d101      	bne.n	8000fde <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 8000fda:	690b      	ldr	r3, [r1, #16]
 8000fdc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	6143      	str	r3, [r0, #20]
}
 8000fe2:	bd10      	pop	{r4, pc}
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	40000400 	.word	0x40000400
 8000fec:	40002000 	.word	0x40002000
 8000ff0:	40014400 	.word	0x40014400
 8000ff4:	40014800 	.word	0x40014800
 8000ff8:	fffffcff 	.word	0xfffffcff

08000ffc <HAL_TIM_Base_Init>:
{
 8000ffc:	b570      	push	{r4, r5, r6, lr}
 8000ffe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001000:	2001      	movs	r0, #1
  if(htim == NULL)
 8001002:	2c00      	cmp	r4, #0
 8001004:	d014      	beq.n	8001030 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001006:	0025      	movs	r5, r4
 8001008:	353d      	adds	r5, #61	; 0x3d
 800100a:	782b      	ldrb	r3, [r5, #0]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b00      	cmp	r3, #0
 8001010:	d105      	bne.n	800101e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001012:	0022      	movs	r2, r4
 8001014:	323c      	adds	r2, #60	; 0x3c
 8001016:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8001018:	0020      	movs	r0, r4
 800101a:	f000 fd7f 	bl	8001b1c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800101e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001020:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001022:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001024:	1d21      	adds	r1, r4, #4
 8001026:	f7ff ffa1 	bl	8000f6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800102a:	2301      	movs	r3, #1
  return HAL_OK;
 800102c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800102e:	702b      	strb	r3, [r5, #0]
}
 8001030:	bd70      	pop	{r4, r5, r6, pc}

08001032 <HAL_TIM_PWM_Init>:
{
 8001032:	b570      	push	{r4, r5, r6, lr}
 8001034:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001036:	2001      	movs	r0, #1
  if(htim == NULL)
 8001038:	2c00      	cmp	r4, #0
 800103a:	d014      	beq.n	8001066 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 800103c:	0025      	movs	r5, r4
 800103e:	353d      	adds	r5, #61	; 0x3d
 8001040:	782b      	ldrb	r3, [r5, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d105      	bne.n	8001054 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001048:	0022      	movs	r2, r4
 800104a:	323c      	adds	r2, #60	; 0x3c
 800104c:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 800104e:	0020      	movs	r0, r4
 8001050:	f7ff fee2 	bl	8000e18 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001054:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001056:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001058:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800105a:	1d21      	adds	r1, r4, #4
 800105c:	f7ff ff86 	bl	8000f6c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001060:	2301      	movs	r3, #1
  return HAL_OK;
 8001062:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001064:	702b      	strb	r3, [r5, #0]
}
 8001066:	bd70      	pop	{r4, r5, r6, pc}

08001068 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001068:	2210      	movs	r2, #16
 800106a:	6a03      	ldr	r3, [r0, #32]
{
 800106c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800106e:	4393      	bics	r3, r2
 8001070:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001072:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001074:	4d15      	ldr	r5, [pc, #84]	; (80010cc <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8001076:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001078:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800107a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800107c:	680d      	ldr	r5, [r1, #0]
 800107e:	022d      	lsls	r5, r5, #8
 8001080:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 8001082:	2520      	movs	r5, #32
 8001084:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001086:	688d      	ldr	r5, [r1, #8]
 8001088:	012d      	lsls	r5, r5, #4
 800108a:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800108c:	4d10      	ldr	r5, [pc, #64]	; (80010d0 <TIM_OC2_SetConfig+0x68>)
 800108e:	42a8      	cmp	r0, r5
 8001090:	d10f      	bne.n	80010b2 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001092:	2580      	movs	r5, #128	; 0x80
 8001094:	43aa      	bics	r2, r5
 8001096:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001098:	68ca      	ldr	r2, [r1, #12]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800109e:	2540      	movs	r5, #64	; 0x40
 80010a0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80010a2:	4d0c      	ldr	r5, [pc, #48]	; (80010d4 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010a4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80010a6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010a8:	698b      	ldr	r3, [r1, #24]
 80010aa:	4333      	orrs	r3, r6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	432b      	orrs	r3, r5
 80010b0:	e005      	b.n	80010be <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80010b2:	4d09      	ldr	r5, [pc, #36]	; (80010d8 <TIM_OC2_SetConfig+0x70>)
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	d0f4      	beq.n	80010a2 <TIM_OC2_SetConfig+0x3a>
 80010b8:	4d08      	ldr	r5, [pc, #32]	; (80010dc <TIM_OC2_SetConfig+0x74>)
 80010ba:	42a8      	cmp	r0, r5
 80010bc:	d0f1      	beq.n	80010a2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80010be:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80010c0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80010c2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80010c4:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80010c6:	6202      	str	r2, [r0, #32]
}
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	ffff8cff 	.word	0xffff8cff
 80010d0:	40012c00 	.word	0x40012c00
 80010d4:	fffff3ff 	.word	0xfffff3ff
 80010d8:	40014400 	.word	0x40014400
 80010dc:	40014800 	.word	0x40014800

080010e0 <HAL_TIM_PWM_ConfigChannel>:
{
 80010e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80010e2:	0006      	movs	r6, r0
 80010e4:	2302      	movs	r3, #2
 80010e6:	363c      	adds	r6, #60	; 0x3c
{
 80010e8:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80010ea:	7831      	ldrb	r1, [r6, #0]
{
 80010ec:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80010ee:	0018      	movs	r0, r3
 80010f0:	2901      	cmp	r1, #1
 80010f2:	d025      	beq.n	8001140 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80010f4:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80010f6:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80010f8:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80010fa:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80010fc:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80010fe:	2a0c      	cmp	r2, #12
 8001100:	d81a      	bhi.n	8001138 <HAL_TIM_PWM_ConfigChannel+0x58>
 8001102:	0010      	movs	r0, r2
 8001104:	f7ff f80a 	bl	800011c <__gnu_thumb1_case_uqi>
 8001108:	18181807 	.word	0x18181807
 800110c:	1818181d 	.word	0x1818181d
 8001110:	1818182f 	.word	0x1818182f
 8001114:	41          	.byte	0x41
 8001115:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001116:	0029      	movs	r1, r5
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	f7ff fdad 	bl	8000c78 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800111e:	2208      	movs	r2, #8
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	6999      	ldr	r1, [r3, #24]
 8001124:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001126:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001128:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800112a:	699a      	ldr	r2, [r3, #24]
 800112c:	438a      	bics	r2, r1
 800112e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001130:	699a      	ldr	r2, [r3, #24]
 8001132:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001134:	430a      	orrs	r2, r1
 8001136:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001138:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800113a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800113c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 800113e:	7030      	strb	r0, [r6, #0]
}
 8001140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001142:	0029      	movs	r1, r5
 8001144:	6820      	ldr	r0, [r4, #0]
 8001146:	f7ff ff8f 	bl	8001068 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	6999      	ldr	r1, [r3, #24]
 8001152:	430a      	orrs	r2, r1
 8001154:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001156:	699a      	ldr	r2, [r3, #24]
 8001158:	4915      	ldr	r1, [pc, #84]	; (80011b0 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800115a:	400a      	ands	r2, r1
 800115c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800115e:	692a      	ldr	r2, [r5, #16]
 8001160:	6999      	ldr	r1, [r3, #24]
 8001162:	0212      	lsls	r2, r2, #8
 8001164:	e7e6      	b.n	8001134 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001166:	0029      	movs	r1, r5
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	f7ff fdc1 	bl	8000cf0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800116e:	2208      	movs	r2, #8
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	69d9      	ldr	r1, [r3, #28]
 8001174:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001176:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001178:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800117a:	69da      	ldr	r2, [r3, #28]
 800117c:	438a      	bics	r2, r1
 800117e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001180:	69da      	ldr	r2, [r3, #28]
 8001182:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001184:	430a      	orrs	r2, r1
 8001186:	61da      	str	r2, [r3, #28]
    break;
 8001188:	e7d6      	b.n	8001138 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800118a:	0029      	movs	r1, r5
 800118c:	6820      	ldr	r0, [r4, #0]
 800118e:	f7ff fdef 	bl	8000d70 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	69d9      	ldr	r1, [r3, #28]
 800119a:	430a      	orrs	r2, r1
 800119c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800119e:	69da      	ldr	r2, [r3, #28]
 80011a0:	4903      	ldr	r1, [pc, #12]	; (80011b0 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80011a2:	400a      	ands	r2, r1
 80011a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011a6:	692a      	ldr	r2, [r5, #16]
 80011a8:	69d9      	ldr	r1, [r3, #28]
 80011aa:	0212      	lsls	r2, r2, #8
 80011ac:	e7ea      	b.n	8001184 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	fffffbff 	.word	0xfffffbff

080011b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80011b4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80011b6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011b8:	4d03      	ldr	r5, [pc, #12]	; (80011c8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011ba:	430a      	orrs	r2, r1
 80011bc:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011be:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80011c0:	4313      	orrs	r3, r2
 80011c2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011c4:	6083      	str	r3, [r0, #8]
}
 80011c6:	bd30      	pop	{r4, r5, pc}
 80011c8:	ffff00ff 	.word	0xffff00ff

080011cc <HAL_TIM_ConfigClockSource>:
{
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80011ce:	0005      	movs	r5, r0
 80011d0:	2302      	movs	r3, #2
 80011d2:	353c      	adds	r5, #60	; 0x3c
 80011d4:	782a      	ldrb	r2, [r5, #0]
{
 80011d6:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80011d8:	0018      	movs	r0, r3
 80011da:	2a01      	cmp	r2, #1
 80011dc:	d019      	beq.n	8001212 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80011de:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 80011e0:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 80011e2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80011e4:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 80011e6:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80011e8:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80011ea:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_TIM_ConfigClockSource+0x160>)
 80011ee:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80011f0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80011f2:	680b      	ldr	r3, [r1, #0]
 80011f4:	2b40      	cmp	r3, #64	; 0x40
 80011f6:	d100      	bne.n	80011fa <HAL_TIM_ConfigClockSource+0x2e>
 80011f8:	e06f      	b.n	80012da <HAL_TIM_ConfigClockSource+0x10e>
 80011fa:	d816      	bhi.n	800122a <HAL_TIM_ConfigClockSource+0x5e>
 80011fc:	2b10      	cmp	r3, #16
 80011fe:	d100      	bne.n	8001202 <HAL_TIM_ConfigClockSource+0x36>
 8001200:	e087      	b.n	8001312 <HAL_TIM_ConfigClockSource+0x146>
 8001202:	d807      	bhi.n	8001214 <HAL_TIM_ConfigClockSource+0x48>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d100      	bne.n	800120a <HAL_TIM_ConfigClockSource+0x3e>
 8001208:	e07d      	b.n	8001306 <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 800120a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800120c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800120e:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001210:	7028      	strb	r0, [r5, #0]
}
 8001212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8001214:	2b20      	cmp	r3, #32
 8001216:	d100      	bne.n	800121a <HAL_TIM_ConfigClockSource+0x4e>
 8001218:	e081      	b.n	800131e <HAL_TIM_ConfigClockSource+0x152>
 800121a:	2b30      	cmp	r3, #48	; 0x30
 800121c:	d1f5      	bne.n	800120a <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 800121e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001220:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001222:	4393      	bics	r3, r2
 8001224:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001226:	2337      	movs	r3, #55	; 0x37
 8001228:	e055      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 800122a:	2b70      	cmp	r3, #112	; 0x70
 800122c:	d033      	beq.n	8001296 <HAL_TIM_ConfigClockSource+0xca>
 800122e:	d81b      	bhi.n	8001268 <HAL_TIM_ConfigClockSource+0x9c>
 8001230:	2b50      	cmp	r3, #80	; 0x50
 8001232:	d03b      	beq.n	80012ac <HAL_TIM_ConfigClockSource+0xe0>
 8001234:	2b60      	cmp	r3, #96	; 0x60
 8001236:	d1e8      	bne.n	800120a <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001238:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800123a:	684b      	ldr	r3, [r1, #4]
 800123c:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800123e:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001240:	4f3b      	ldr	r7, [pc, #236]	; (8001330 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001242:	43a1      	bics	r1, r4
 8001244:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001246:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001248:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800124a:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800124c:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800124e:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001250:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001252:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001254:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001256:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 800125c:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800125e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001260:	4393      	bics	r3, r2
 8001262:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001264:	2367      	movs	r3, #103	; 0x67
 8001266:	e036      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0152      	lsls	r2, r2, #5
 800126c:	4293      	cmp	r3, r2
 800126e:	d00d      	beq.n	800128c <HAL_TIM_ConfigClockSource+0xc0>
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	0192      	lsls	r2, r2, #6
 8001274:	4293      	cmp	r3, r2
 8001276:	d1c8      	bne.n	800120a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8001278:	68cb      	ldr	r3, [r1, #12]
 800127a:	684a      	ldr	r2, [r1, #4]
 800127c:	6889      	ldr	r1, [r1, #8]
 800127e:	f7ff ff99 	bl	80011b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	6822      	ldr	r2, [r4, #0]
 8001286:	01db      	lsls	r3, r3, #7
 8001288:	6891      	ldr	r1, [r2, #8]
 800128a:	e00c      	b.n	80012a6 <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800128c:	2207      	movs	r2, #7
 800128e:	6883      	ldr	r3, [r0, #8]
 8001290:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 8001292:	6083      	str	r3, [r0, #8]
 8001294:	e7b9      	b.n	800120a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8001296:	68cb      	ldr	r3, [r1, #12]
 8001298:	684a      	ldr	r2, [r1, #4]
 800129a:	6889      	ldr	r1, [r1, #8]
 800129c:	f7ff ff8a 	bl	80011b4 <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80012a0:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 80012a2:	6822      	ldr	r2, [r4, #0]
 80012a4:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012a6:	430b      	orrs	r3, r1
 80012a8:	6093      	str	r3, [r2, #8]
    break;
 80012aa:	e7ae      	b.n	800120a <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012ac:	684a      	ldr	r2, [r1, #4]
 80012ae:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80012b0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012b4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012b6:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012b8:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012ba:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012bc:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012be:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012c0:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012c2:	240a      	movs	r4, #10
 80012c4:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80012c6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80012c8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012ca:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012cc:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80012ce:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012d0:	4393      	bics	r3, r2
 80012d2:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012d4:	2357      	movs	r3, #87	; 0x57
 80012d6:	4313      	orrs	r3, r2
 80012d8:	e7db      	b.n	8001292 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80012da:	684a      	ldr	r2, [r1, #4]
 80012dc:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80012de:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012e0:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012e2:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012e4:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012e6:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80012e8:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012ea:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012ec:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012ee:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012f0:	240a      	movs	r4, #10
 80012f2:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80012f4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80012f6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80012f8:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012fa:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80012fc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012fe:	4393      	bics	r3, r2
 8001300:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001302:	2347      	movs	r3, #71	; 0x47
 8001304:	e7e7      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001306:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001308:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800130a:	4393      	bics	r3, r2
 800130c:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800130e:	2307      	movs	r3, #7
 8001310:	e7e1      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001312:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001314:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001316:	4393      	bics	r3, r2
 8001318:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800131a:	2317      	movs	r3, #23
 800131c:	e7db      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800131e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001320:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001322:	4393      	bics	r3, r2
 8001324:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001326:	2327      	movs	r3, #39	; 0x27
 8001328:	e7d5      	b.n	80012d6 <HAL_TIM_ConfigClockSource+0x10a>
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	ffff0088 	.word	0xffff0088
 8001330:	ffff0fff 	.word	0xffff0fff

08001334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001334:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001336:	2401      	movs	r4, #1
 8001338:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800133a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800133c:	6a03      	ldr	r3, [r0, #32]
 800133e:	43a3      	bics	r3, r4
 8001340:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001342:	6a03      	ldr	r3, [r0, #32]
 8001344:	431a      	orrs	r2, r3
 8001346:	6202      	str	r2, [r0, #32]
}
 8001348:	bd10      	pop	{r4, pc}
	...

0800134c <HAL_TIM_PWM_Start>:
{
 800134c:	b510      	push	{r4, lr}
 800134e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001350:	2201      	movs	r2, #1
 8001352:	6800      	ldr	r0, [r0, #0]
 8001354:	f7ff ffee 	bl	8001334 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001358:	6823      	ldr	r3, [r4, #0]
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_TIM_PWM_Start+0x38>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d005      	beq.n	800136c <HAL_TIM_PWM_Start+0x20>
 8001360:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_TIM_PWM_Start+0x3c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d002      	beq.n	800136c <HAL_TIM_PWM_Start+0x20>
 8001366:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_TIM_PWM_Start+0x40>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d104      	bne.n	8001376 <HAL_TIM_PWM_Start+0x2a>
    __HAL_TIM_MOE_ENABLE(htim);
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001370:	0212      	lsls	r2, r2, #8
 8001372:	430a      	orrs	r2, r1
 8001374:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001376:	2201      	movs	r2, #1
 8001378:	6819      	ldr	r1, [r3, #0]
}
 800137a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
}
 8001380:	bd10      	pop	{r4, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40012c00 	.word	0x40012c00
 8001388:	40014400 	.word	0x40014400
 800138c:	40014800 	.word	0x40014800

08001390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001390:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001392:	0004      	movs	r4, r0
 8001394:	343c      	adds	r4, #60	; 0x3c
 8001396:	7822      	ldrb	r2, [r4, #0]
{
 8001398:	0003      	movs	r3, r0
 800139a:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 800139c:	2a01      	cmp	r2, #1
 800139e:	d017      	beq.n	80013d0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80013a0:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013a2:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80013a4:	353d      	adds	r5, #61	; 0x3d
 80013a6:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	306e      	adds	r0, #110	; 0x6e
 80013ac:	4382      	bics	r2, r0
 80013ae:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013b4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013b6:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80013b8:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80013ba:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4382      	bics	r2, r0
 80013c0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013c2:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80013c4:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80013c6:	430a      	orrs	r2, r1
 80013c8:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80013ca:	2301      	movs	r3, #1
 80013cc:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80013ce:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80013d0:	bd30      	pop	{r4, r5, pc}

080013d2 <HAL_TIMEx_CommutationCallback>:
 80013d2:	4770      	bx	lr

080013d4 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80013d4:	4770      	bx	lr
	...

080013d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013dc:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013de:	69c2      	ldr	r2, [r0, #28]
 80013e0:	6883      	ldr	r3, [r0, #8]
 80013e2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013e4:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013e6:	4303      	orrs	r3, r0
 80013e8:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013ea:	4e3f      	ldr	r6, [pc, #252]	; (80014e8 <UART_SetConfig+0x110>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013ec:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013ee:	483f      	ldr	r0, [pc, #252]	; (80014ec <UART_SetConfig+0x114>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80013f0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80013f2:	4001      	ands	r1, r0
 80013f4:	430b      	orrs	r3, r1
 80013f6:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013f8:	686b      	ldr	r3, [r5, #4]
 80013fa:	493d      	ldr	r1, [pc, #244]	; (80014f0 <UART_SetConfig+0x118>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013fc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013fe:	400b      	ands	r3, r1
 8001400:	68e1      	ldr	r1, [r4, #12]
 8001402:	430b      	orrs	r3, r1
 8001404:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001406:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001408:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800140a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800140c:	4839      	ldr	r0, [pc, #228]	; (80014f4 <UART_SetConfig+0x11c>)
 800140e:	4001      	ands	r1, r0
 8001410:	430b      	orrs	r3, r1
 8001412:	60ab      	str	r3, [r5, #8]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001418:	42b5      	cmp	r5, r6
 800141a:	d110      	bne.n	800143e <UART_SetConfig+0x66>
 800141c:	2003      	movs	r0, #3
 800141e:	4936      	ldr	r1, [pc, #216]	; (80014f8 <UART_SetConfig+0x120>)
 8001420:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001422:	4001      	ands	r1, r0
 8001424:	4835      	ldr	r0, [pc, #212]	; (80014fc <UART_SetConfig+0x124>)
 8001426:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001428:	429a      	cmp	r2, r3
 800142a:	d013      	beq.n	8001454 <UART_SetConfig+0x7c>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 800142c:	2808      	cmp	r0, #8
 800142e:	d858      	bhi.n	80014e2 <UART_SetConfig+0x10a>
 8001430:	f7fe fe74 	bl	800011c <__gnu_thumb1_case_uqi>
 8001434:	57425737 	.word	0x57425737
 8001438:	5757574b 	.word	0x5757574b
 800143c:	50          	.byte	0x50
 800143d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800143e:	4930      	ldr	r1, [pc, #192]	; (8001500 <UART_SetConfig+0x128>)
 8001440:	428d      	cmp	r5, r1
 8001442:	d14c      	bne.n	80014de <UART_SetConfig+0x106>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001444:	429a      	cmp	r2, r3
 8001446:	d12c      	bne.n	80014a2 <UART_SetConfig+0xca>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001448:	f7ff fb70 	bl	8000b2c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800144c:	6863      	ldr	r3, [r4, #4]
 800144e:	0040      	lsls	r0, r0, #1
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	e00b      	b.n	800146c <UART_SetConfig+0x94>
    switch (clocksource)
 8001454:	2808      	cmp	r0, #8
 8001456:	d821      	bhi.n	800149c <UART_SetConfig+0xc4>
 8001458:	f7fe fe56 	bl	8000108 <__gnu_thumb1_case_sqi>
 800145c:	200520f6 	.word	0x200520f6
 8001460:	20202018 	.word	0x20202018
 8001464:	1b          	.byte	0x1b
 8001465:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001466:	6863      	ldr	r3, [r4, #4]
 8001468:	0858      	lsrs	r0, r3, #1
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <UART_SetConfig+0x12c>)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800146c:	18c0      	adds	r0, r0, r3
 800146e:	6861      	ldr	r1, [r4, #4]
 8001470:	f7fe fe5e 	bl	8000130 <__udivsi3>
 8001474:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001476:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001478:	220f      	movs	r2, #15
 800147a:	0019      	movs	r1, r3
 800147c:	4391      	bics	r1, r2
 800147e:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001480:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001482:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001484:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001486:	4313      	orrs	r3, r2
 8001488:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 800148a:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800148c:	f7ff fa5e 	bl	800094c <HAL_RCC_GetSysClockFreq>
 8001490:	e7dc      	b.n	800144c <UART_SetConfig+0x74>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001492:	6863      	ldr	r3, [r4, #4]
 8001494:	0858      	lsrs	r0, r3, #1
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	e7e7      	b.n	800146c <UART_SetConfig+0x94>
        ret = HAL_ERROR;
 800149c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800149e:	2300      	movs	r3, #0
 80014a0:	e7ea      	b.n	8001478 <UART_SetConfig+0xa0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014a2:	f7ff fb43 	bl	8000b2c <HAL_RCC_GetPCLK1Freq>
 80014a6:	6861      	ldr	r1, [r4, #4]
 80014a8:	084b      	lsrs	r3, r1, #1
 80014aa:	1818      	adds	r0, r3, r0
 80014ac:	f7fe fe40 	bl	8000130 <__udivsi3>
 80014b0:	b280      	uxth	r0, r0
 80014b2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014b4:	2000      	movs	r0, #0
        break;
 80014b6:	e7e8      	b.n	800148a <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80014b8:	6861      	ldr	r1, [r4, #4]
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <UART_SetConfig+0x130>)
 80014bc:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014be:	18c0      	adds	r0, r0, r3
 80014c0:	f7fe fe36 	bl	8000130 <__udivsi3>
 80014c4:	b280      	uxth	r0, r0
 80014c6:	60f0      	str	r0, [r6, #12]
 80014c8:	e7f4      	b.n	80014b4 <UART_SetConfig+0xdc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014ca:	f7ff fa3f 	bl	800094c <HAL_RCC_GetSysClockFreq>
 80014ce:	6861      	ldr	r1, [r4, #4]
 80014d0:	084b      	lsrs	r3, r1, #1
 80014d2:	e7f4      	b.n	80014be <UART_SetConfig+0xe6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	6861      	ldr	r1, [r4, #4]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	0848      	lsrs	r0, r1, #1
 80014dc:	e7ef      	b.n	80014be <UART_SetConfig+0xe6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80014de:	429a      	cmp	r2, r3
 80014e0:	d0dc      	beq.n	800149c <UART_SetConfig+0xc4>
        ret = HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
  return ret;
 80014e4:	e7d1      	b.n	800148a <UART_SetConfig+0xb2>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	40013800 	.word	0x40013800
 80014ec:	efff69f3 	.word	0xefff69f3
 80014f0:	ffffcfff 	.word	0xffffcfff
 80014f4:	fffff4ff 	.word	0xfffff4ff
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08001e1c 	.word	0x08001e1c
 8001500:	40004400 	.word	0x40004400
 8001504:	00f42400 	.word	0x00f42400
 8001508:	007a1200 	.word	0x007a1200

0800150c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800150c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800150e:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001510:	07da      	lsls	r2, r3, #31
 8001512:	d506      	bpl.n	8001522 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001514:	6801      	ldr	r1, [r0, #0]
 8001516:	4c28      	ldr	r4, [pc, #160]	; (80015b8 <UART_AdvFeatureConfig+0xac>)
 8001518:	684a      	ldr	r2, [r1, #4]
 800151a:	4022      	ands	r2, r4
 800151c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800151e:	4322      	orrs	r2, r4
 8001520:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001522:	079a      	lsls	r2, r3, #30
 8001524:	d506      	bpl.n	8001534 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001526:	6801      	ldr	r1, [r0, #0]
 8001528:	4c24      	ldr	r4, [pc, #144]	; (80015bc <UART_AdvFeatureConfig+0xb0>)
 800152a:	684a      	ldr	r2, [r1, #4]
 800152c:	4022      	ands	r2, r4
 800152e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001530:	4322      	orrs	r2, r4
 8001532:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001534:	075a      	lsls	r2, r3, #29
 8001536:	d506      	bpl.n	8001546 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001538:	6801      	ldr	r1, [r0, #0]
 800153a:	4c21      	ldr	r4, [pc, #132]	; (80015c0 <UART_AdvFeatureConfig+0xb4>)
 800153c:	684a      	ldr	r2, [r1, #4]
 800153e:	4022      	ands	r2, r4
 8001540:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001542:	4322      	orrs	r2, r4
 8001544:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001546:	071a      	lsls	r2, r3, #28
 8001548:	d506      	bpl.n	8001558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800154a:	6801      	ldr	r1, [r0, #0]
 800154c:	4c1d      	ldr	r4, [pc, #116]	; (80015c4 <UART_AdvFeatureConfig+0xb8>)
 800154e:	684a      	ldr	r2, [r1, #4]
 8001550:	4022      	ands	r2, r4
 8001552:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001554:	4322      	orrs	r2, r4
 8001556:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001558:	06da      	lsls	r2, r3, #27
 800155a:	d506      	bpl.n	800156a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800155c:	6801      	ldr	r1, [r0, #0]
 800155e:	4c1a      	ldr	r4, [pc, #104]	; (80015c8 <UART_AdvFeatureConfig+0xbc>)
 8001560:	688a      	ldr	r2, [r1, #8]
 8001562:	4022      	ands	r2, r4
 8001564:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001566:	4322      	orrs	r2, r4
 8001568:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800156a:	069a      	lsls	r2, r3, #26
 800156c:	d506      	bpl.n	800157c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800156e:	6801      	ldr	r1, [r0, #0]
 8001570:	4c16      	ldr	r4, [pc, #88]	; (80015cc <UART_AdvFeatureConfig+0xc0>)
 8001572:	688a      	ldr	r2, [r1, #8]
 8001574:	4022      	ands	r2, r4
 8001576:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001578:	4322      	orrs	r2, r4
 800157a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800157c:	065a      	lsls	r2, r3, #25
 800157e:	d510      	bpl.n	80015a2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001580:	6801      	ldr	r1, [r0, #0]
 8001582:	4d13      	ldr	r5, [pc, #76]	; (80015d0 <UART_AdvFeatureConfig+0xc4>)
 8001584:	684a      	ldr	r2, [r1, #4]
 8001586:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001588:	402a      	ands	r2, r5
 800158a:	4322      	orrs	r2, r4
 800158c:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0352      	lsls	r2, r2, #13
 8001592:	4294      	cmp	r4, r2
 8001594:	d105      	bne.n	80015a2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001596:	684a      	ldr	r2, [r1, #4]
 8001598:	4c0e      	ldr	r4, [pc, #56]	; (80015d4 <UART_AdvFeatureConfig+0xc8>)
 800159a:	4022      	ands	r2, r4
 800159c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800159e:	4322      	orrs	r2, r4
 80015a0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015a2:	061b      	lsls	r3, r3, #24
 80015a4:	d506      	bpl.n	80015b4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015a6:	6802      	ldr	r2, [r0, #0]
 80015a8:	490b      	ldr	r1, [pc, #44]	; (80015d8 <UART_AdvFeatureConfig+0xcc>)
 80015aa:	6853      	ldr	r3, [r2, #4]
 80015ac:	400b      	ands	r3, r1
 80015ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6053      	str	r3, [r2, #4]
  }
}
 80015b4:	bd30      	pop	{r4, r5, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	fffdffff 	.word	0xfffdffff
 80015bc:	fffeffff 	.word	0xfffeffff
 80015c0:	fffbffff 	.word	0xfffbffff
 80015c4:	ffff7fff 	.word	0xffff7fff
 80015c8:	ffffefff 	.word	0xffffefff
 80015cc:	ffffdfff 	.word	0xffffdfff
 80015d0:	ffefffff 	.word	0xffefffff
 80015d4:	ff9fffff 	.word	0xff9fffff
 80015d8:	fff7ffff 	.word	0xfff7ffff

080015dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015de:	0004      	movs	r4, r0
 80015e0:	000e      	movs	r6, r1
 80015e2:	0015      	movs	r5, r2
 80015e4:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	69d3      	ldr	r3, [r2, #28]
 80015ea:	4033      	ands	r3, r6
 80015ec:	1b9b      	subs	r3, r3, r6
 80015ee:	4259      	negs	r1, r3
 80015f0:	414b      	adcs	r3, r1
 80015f2:	42ab      	cmp	r3, r5
 80015f4:	d001      	beq.n	80015fa <UART_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80015f6:	2000      	movs	r0, #0
 80015f8:	e018      	b.n	800162c <UART_WaitOnFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80015fa:	9b06      	ldr	r3, [sp, #24]
 80015fc:	3301      	adds	r3, #1
 80015fe:	d0f3      	beq.n	80015e8 <UART_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001600:	9b06      	ldr	r3, [sp, #24]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d113      	bne.n	800162e <UART_WaitOnFlagUntilTimeout+0x52>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <UART_WaitOnFlagUntilTimeout+0x60>)
 800160a:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800160c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800160e:	400a      	ands	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	31a3      	adds	r1, #163	; 0xa3
 8001616:	31ff      	adds	r1, #255	; 0xff
 8001618:	438a      	bics	r2, r1
 800161a:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800161c:	0022      	movs	r2, r4
 800161e:	2320      	movs	r3, #32
 8001620:	3269      	adds	r2, #105	; 0x69
 8001622:	7013      	strb	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 8001624:	7053      	strb	r3, [r2, #1]
        __HAL_UNLOCK(huart);
 8001626:	2300      	movs	r3, #0
 8001628:	3468      	adds	r4, #104	; 0x68
 800162a:	7023      	strb	r3, [r4, #0]
}
 800162c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800162e:	f7fe fe35 	bl	800029c <HAL_GetTick>
 8001632:	9b06      	ldr	r3, [sp, #24]
 8001634:	1bc0      	subs	r0, r0, r7
 8001636:	4283      	cmp	r3, r0
 8001638:	d2d5      	bcs.n	80015e6 <UART_WaitOnFlagUntilTimeout+0xa>
 800163a:	e7e4      	b.n	8001606 <UART_WaitOnFlagUntilTimeout+0x2a>
 800163c:	fffffe5f 	.word	0xfffffe5f

08001640 <UART_CheckIdleState>:
{
 8001640:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001642:	2600      	movs	r6, #0
{
 8001644:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001646:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001648:	f7fe fe28 	bl	800029c <HAL_GetTick>
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800164c:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <UART_CheckIdleState+0x68>)
 800164e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001650:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8001652:	4293      	cmp	r3, r2
 8001654:	d008      	beq.n	8001668 <UART_CheckIdleState+0x28>
  huart->gState  = HAL_UART_STATE_READY;
 8001656:	0022      	movs	r2, r4
 8001658:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800165a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800165c:	3269      	adds	r2, #105	; 0x69
  __HAL_UNLOCK(huart);
 800165e:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001660:	7013      	strb	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001662:	7053      	strb	r3, [r2, #1]
  __HAL_UNLOCK(huart);
 8001664:	7020      	strb	r0, [r4, #0]
}
 8001666:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	071b      	lsls	r3, r3, #28
 800166c:	d40f      	bmi.n	800168e <UART_CheckIdleState+0x4e>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	075b      	lsls	r3, r3, #29
 8001674:	d5ef      	bpl.n	8001656 <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <UART_CheckIdleState+0x6c>)
 800167a:	2200      	movs	r2, #0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	03c9      	lsls	r1, r1, #15
 8001680:	002b      	movs	r3, r5
 8001682:	0020      	movs	r0, r4
 8001684:	f7ff ffaa 	bl	80015dc <UART_WaitOnFlagUntilTimeout>
 8001688:	2800      	cmp	r0, #0
 800168a:	d10b      	bne.n	80016a4 <UART_CheckIdleState+0x64>
 800168c:	e7e3      	b.n	8001656 <UART_CheckIdleState+0x16>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <UART_CheckIdleState+0x6c>)
 8001692:	0032      	movs	r2, r6
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	0389      	lsls	r1, r1, #14
 8001698:	0003      	movs	r3, r0
 800169a:	0020      	movs	r0, r4
 800169c:	f7ff ff9e 	bl	80015dc <UART_WaitOnFlagUntilTimeout>
 80016a0:	2800      	cmp	r0, #0
 80016a2:	d0e4      	beq.n	800166e <UART_CheckIdleState+0x2e>
        return HAL_TIMEOUT;
 80016a4:	2003      	movs	r0, #3
 80016a6:	e7de      	b.n	8001666 <UART_CheckIdleState+0x26>
 80016a8:	40013800 	.word	0x40013800
 80016ac:	01ffffff 	.word	0x01ffffff

080016b0 <HAL_UART_Init>:
{
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80016b4:	d101      	bne.n	80016ba <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80016b6:	2001      	movs	r0, #1
}
 80016b8:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 80016ba:	0005      	movs	r5, r0
 80016bc:	3569      	adds	r5, #105	; 0x69
 80016be:	782b      	ldrb	r3, [r5, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80016c6:	0002      	movs	r2, r0
 80016c8:	3268      	adds	r2, #104	; 0x68
 80016ca:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 80016cc:	f000 fa90 	bl	8001bf0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80016d0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80016d2:	2101      	movs	r1, #1
 80016d4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80016d6:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80016d8:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016da:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80016dc:	438b      	bics	r3, r1
 80016de:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016e0:	f7ff fe7a 	bl	80013d8 <UART_SetConfig>
 80016e4:	2801      	cmp	r0, #1
 80016e6:	d0e6      	beq.n	80016b6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 80016ee:	0020      	movs	r0, r4
 80016f0:	f7ff ff0c 	bl	800150c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	4908      	ldr	r1, [pc, #32]	; (8001718 <HAL_UART_Init+0x68>)
 80016f8:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80016fa:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016fc:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016fe:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	438a      	bics	r2, r1
 8001706:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001708:	2201      	movs	r2, #1
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001710:	f7ff ff96 	bl	8001640 <UART_CheckIdleState>
 8001714:	e7d0      	b.n	80016b8 <HAL_UART_Init+0x8>
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	ffffb7ff 	.word	0xffffb7ff

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001720:	2234      	movs	r2, #52	; 0x34
 8001722:	2100      	movs	r1, #0
 8001724:	a80b      	add	r0, sp, #44	; 0x2c
 8001726:	f000 fb54 	bl	8001dd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172a:	2210      	movs	r2, #16
 800172c:	2100      	movs	r1, #0
 800172e:	a801      	add	r0, sp, #4
 8001730:	f000 fb4f 	bl	8001dd2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001734:	2218      	movs	r2, #24
 8001736:	2100      	movs	r1, #0
 8001738:	a805      	add	r0, sp, #20
 800173a:	f000 fb4a 	bl	8001dd2 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800173e:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001740:	2320      	movs	r3, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8001744:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001746:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f7fe fece 	bl	80004e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174c:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001750:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001752:	0029      	movs	r1, r5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001754:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001756:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8001758:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800175c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800175e:	f7ff f931 	bl	80009c4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001762:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001764:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001766:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f7ff f9f0 	bl	8000b4c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800176c:	b019      	add	sp, #100	; 0x64
 800176e:	bd30      	pop	{r4, r5, pc}

08001770 <HAL_GPIO_EXTI_Callback>:
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001770:	b510      	push	{r4, lr}
	if(GPIO_Pin == FPIN_Pin) {
 8001772:	2820      	cmp	r0, #32
 8001774:	d115      	bne.n	80017a2 <HAL_GPIO_EXTI_Callback+0x32>

		Rocket_UpdateStatusLaunched(&rocket_info);


		__HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 8001776:	2402      	movs	r4, #2
		Rocket_UpdateStatusLaunched(&rocket_info);
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <HAL_GPIO_EXTI_Callback+0x4c>)
 800177a:	f000 f994 	bl	8001aa6 <Rocket_UpdateStatusLaunched>
		__HAL_TIM_CLEAR_FLAG(&htim14, TIM_FLAG_UPDATE);
 800177e:	4810      	ldr	r0, [pc, #64]	; (80017c0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001780:	4264      	negs	r4, r4
 8001782:	6803      	ldr	r3, [r0, #0]
 8001784:	611c      	str	r4, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim14);
 8001786:	f7ff fb27 	bl	8000dd8 <HAL_TIM_Base_Start_IT>

		__HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 800178a:	480e      	ldr	r0, [pc, #56]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x54>)
 800178c:	6803      	ldr	r3, [r0, #0]
 800178e:	611c      	str	r4, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim16);
 8001790:	f7ff fb22 	bl	8000dd8 <HAL_TIM_Base_Start_IT>

		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,RESET);
 8001794:	2200      	movs	r2, #0

	}

	if(GPIO_Pin == TRIG1_Pin){
		Rocket_UpdateStatusAbleToDeploy_1stStage(&rocket_info);
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SET);
 8001796:	2090      	movs	r0, #144	; 0x90
 8001798:	2104      	movs	r1, #4
 800179a:	05c0      	lsls	r0, r0, #23
 800179c:	f7fe fe92 	bl	80004c4 <HAL_GPIO_WritePin>
	}

	if(GPIO_Pin == TRIG2_Pin){
		Rocket_UpdateStatusAbleToDeploy_2ndStage(&rocket_info);
	}
}
 80017a0:	bd10      	pop	{r4, pc}
	if(GPIO_Pin == TRIG1_Pin){
 80017a2:	2808      	cmp	r0, #8
 80017a4:	d104      	bne.n	80017b0 <HAL_GPIO_EXTI_Callback+0x40>
		Rocket_UpdateStatusAbleToDeploy_1stStage(&rocket_info);
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_GPIO_EXTI_Callback+0x4c>)
 80017a8:	f000 f987 	bl	8001aba <Rocket_UpdateStatusAbleToDeploy_1stStage>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	e7f2      	b.n	8001796 <HAL_GPIO_EXTI_Callback+0x26>
	if(GPIO_Pin == TRIG2_Pin){
 80017b0:	2810      	cmp	r0, #16
 80017b2:	d1f5      	bne.n	80017a0 <HAL_GPIO_EXTI_Callback+0x30>
		Rocket_UpdateStatusAbleToDeploy_2ndStage(&rocket_info);
 80017b4:	4801      	ldr	r0, [pc, #4]	; (80017bc <HAL_GPIO_EXTI_Callback+0x4c>)
 80017b6:	f000 f985 	bl	8001ac4 <Rocket_UpdateStatusAbleToDeploy_2ndStage>
}
 80017ba:	e7f1      	b.n	80017a0 <HAL_GPIO_EXTI_Callback+0x30>
 80017bc:	20000024 	.word	0x20000024
 80017c0:	200001d8 	.word	0x200001d8
 80017c4:	20000218 	.word	0x20000218

080017c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {

	if(htim->Instance == TIM14){
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017ca:	6802      	ldr	r2, [r0, #0]
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80017cc:	b510      	push	{r4, lr}
 80017ce:	0004      	movs	r4, r0
	if(htim->Instance == TIM14){
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d105      	bne.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0x18>
		Rocket_UpdateStatusAllowDeploy(&rocket_info);
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017d6:	f000 f96b 	bl	8001ab0 <Rocket_UpdateStatusAllowDeploy>
		HAL_TIM_Base_Stop_IT(&htim14);
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80017dc:	f7ff fb06 	bl	8000dec <HAL_TIM_Base_Stop_IT>
	}

	if(htim->Instance == TIM16){
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d105      	bne.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		Rocket_UpdateStatusAbleToDeploy_1stStage(&rocket_info);
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017ea:	f000 f966 	bl	8001aba <Rocket_UpdateStatusAbleToDeploy_1stStage>
		HAL_TIM_Base_Stop_IT(&htim16);
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017f0:	f7ff fafc 	bl	8000dec <HAL_TIM_Base_Stop_IT>
	}

}
 80017f4:	bd10      	pop	{r4, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	40002000 	.word	0x40002000
 80017fc:	20000024 	.word	0x20000024
 8001800:	200001d8 	.word	0x200001d8
 8001804:	40014400 	.word	0x40014400
 8001808:	20000218 	.word	0x20000218

0800180c <DriveServo>:

void DriveServo(){
	int pulse = 350;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 800180c:	22af      	movs	r2, #175	; 0xaf
 800180e:	4b02      	ldr	r3, [pc, #8]	; (8001818 <DriveServo+0xc>)
 8001810:	0052      	lsls	r2, r2, #1
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001816:	4770      	bx	lr
 8001818:	20000198 	.word	0x20000198

0800181c <ReleaseServo>:
void ReleaseServo(){
	int pulse = 30;
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 800181c:	221e      	movs	r2, #30
 800181e:	4b02      	ldr	r3, [pc, #8]	; (8001828 <ReleaseServo+0xc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001824:	4770      	bx	lr
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	20000198 	.word	0x20000198

0800182c <DriveAirCylinder>:
void DriveAirCylinder(){
	HAL_GPIO_WritePin(AIR_GPIO_Port,AIR_Pin,SET);
 800182c:	2090      	movs	r0, #144	; 0x90
void DriveAirCylinder(){
 800182e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(AIR_GPIO_Port,AIR_Pin,SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2140      	movs	r1, #64	; 0x40
 8001834:	05c0      	lsls	r0, r0, #23
 8001836:	f7fe fe45 	bl	80004c4 <HAL_GPIO_WritePin>
}
 800183a:	bd10      	pop	{r4, pc}

0800183c <ReleaseAirCylinder>:
void ReleaseAirCylinder(){
	HAL_GPIO_WritePin(AIR_GPIO_Port,AIR_Pin,RESET);
 800183c:	2090      	movs	r0, #144	; 0x90
void ReleaseAirCylinder(){
 800183e:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(AIR_GPIO_Port,AIR_Pin,RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	2140      	movs	r1, #64	; 0x40
 8001844:	05c0      	lsls	r0, r0, #23
 8001846:	f7fe fe3d 	bl	80004c4 <HAL_GPIO_WritePin>
}
 800184a:	bd10      	pop	{r4, pc}

0800184c <main>:
{
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001850:	f7fe fd0c 	bl	800026c <HAL_Init>
  SystemClock_Config();
 8001854:	f7ff ff62 	bl	800171c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	2214      	movs	r2, #20
 800185a:	2100      	movs	r1, #0
 800185c:	a809      	add	r0, sp, #36	; 0x24
 800185e:	f000 fab8 	bl	8001dd2 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2080      	movs	r0, #128	; 0x80
 8001864:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <main+0x210>)
 8001866:	0280      	lsls	r0, r0, #10
 8001868:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186c:	4301      	orrs	r1, r0
 800186e:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001874:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|AIR_Pin, GPIO_PIN_RESET);
 8001878:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	9201      	str	r2, [sp, #4]
 800187c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|AIR_Pin, GPIO_PIN_RESET);
 8001880:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	430a      	orrs	r2, r1
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|AIR_Pin, GPIO_PIN_RESET);
 8001888:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	400b      	ands	r3, r1
 800188c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|AIR_Pin, GPIO_PIN_RESET);
 800188e:	2146      	movs	r1, #70	; 0x46
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|AIR_Pin, GPIO_PIN_RESET);
 8001892:	f7fe fe17 	bl	80004c4 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001898:	2506      	movs	r5, #6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	a909      	add	r1, sp, #36	; 0x24
 800189e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80018a0:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f7fe fd62 	bl	8000370 <HAL_GPIO_Init>
  HAL_GPIO_Init(AIR_GPIO_Port, &GPIO_InitStruct);
 80018ac:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ae:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = AIR_Pin;
 80018b0:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(AIR_GPIO_Port, &GPIO_InitStruct);
 80018b2:	a909      	add	r1, sp, #36	; 0x24
 80018b4:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = AIR_Pin;
 80018b6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018bc:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(AIR_GPIO_Port, &GPIO_InitStruct);
 80018be:	f7fe fd57 	bl	8000370 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TRIG1_Pin|TRIG2_Pin|FPIN_Pin;
 80018c2:	2338      	movs	r3, #56	; 0x38
 80018c4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c6:	4b66      	ldr	r3, [pc, #408]	; (8001a60 <main+0x214>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c8:	a909      	add	r1, sp, #36	; 0x24
 80018ca:	4866      	ldr	r0, [pc, #408]	; (8001a64 <main+0x218>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018cc:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ce:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f7fe fd4e 	bl	8000370 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80018d4:	0022      	movs	r2, r4
 80018d6:	0021      	movs	r1, r4
 80018d8:	0028      	movs	r0, r5
 80018da:	f7fe fcf5 	bl	80002c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80018de:	0028      	movs	r0, r5
 80018e0:	f7fe fd22 	bl	8000328 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018e4:	0022      	movs	r2, r4
 80018e6:	0021      	movs	r1, r4
 80018e8:	2007      	movs	r0, #7
 80018ea:	f7fe fced 	bl	80002c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018ee:	2007      	movs	r0, #7
 80018f0:	f7fe fd1a 	bl	8000328 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80018f4:	485c      	ldr	r0, [pc, #368]	; (8001a68 <main+0x21c>)
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <main+0x220>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f8:	6084      	str	r4, [r0, #8]
  huart1.Instance = USART1;
 80018fa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 80018fc:	2396      	movs	r3, #150	; 0x96
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001902:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001904:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001906:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001908:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001910:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001912:	f7ff fecd 	bl	80016b0 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	0021      	movs	r1, r4
 8001918:	2210      	movs	r2, #16
 800191a:	a805      	add	r0, sp, #20
 800191c:	f000 fa59 	bl	8001dd2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	0021      	movs	r1, r4
 8001922:	2208      	movs	r2, #8
 8001924:	a803      	add	r0, sp, #12
 8001926:	f000 fa54 	bl	8001dd2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192a:	221c      	movs	r2, #28
 800192c:	0021      	movs	r1, r4
 800192e:	a809      	add	r0, sp, #36	; 0x24
 8001930:	f000 fa4f 	bl	8001dd2 <memset>
  htim2.Instance = TIM2;
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	4d4e      	ldr	r5, [pc, #312]	; (8001a70 <main+0x224>)
 8001938:	05db      	lsls	r3, r3, #23
 800193a:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 96-1;
 800193c:	235f      	movs	r3, #95	; 0x5f
 800193e:	606b      	str	r3, [r5, #4]
  htim2.Init.Period = 10000-1;
 8001940:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <main+0x228>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001942:	0028      	movs	r0, r5
  htim2.Init.Period = 10000-1;
 8001944:	60eb      	str	r3, [r5, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001946:	2380      	movs	r3, #128	; 0x80
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800194c:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800194e:	f7ff fb55 	bl	8000ffc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001952:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001954:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001956:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001958:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195a:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800195c:	f7ff fc36 	bl	80011cc <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001960:	0028      	movs	r0, r5
 8001962:	f7ff fb66 	bl	8001032 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001966:	a903      	add	r1, sp, #12
 8001968:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196a:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800196e:	f7ff fd0f 	bl	8001390 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001972:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001974:	0022      	movs	r2, r4
 8001976:	a909      	add	r1, sp, #36	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001978:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	0028      	movs	r0, r5
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800197c:	3b5c      	subs	r3, #92	; 0x5c
 800197e:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001980:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001982:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	f7ff fbac 	bl	80010e0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8001988:	0028      	movs	r0, r5
 800198a:	f000 f909 	bl	8001ba0 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 800198e:	483a      	ldr	r0, [pc, #232]	; (8001a78 <main+0x22c>)
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <main+0x230>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	6084      	str	r4, [r0, #8]
  htim14.Instance = TIM14;
 8001994:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 48000-1;
 8001996:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <main+0x234>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001998:	6104      	str	r4, [r0, #16]
  htim14.Init.Prescaler = 48000-1;
 800199a:	6043      	str	r3, [r0, #4]
  htim14.Init.Period = 9000-1;
 800199c:	4b39      	ldr	r3, [pc, #228]	; (8001a84 <main+0x238>)
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199e:	6184      	str	r4, [r0, #24]
  htim14.Init.Period = 9000-1;
 80019a0:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019a2:	f7ff fb2b 	bl	8000ffc <HAL_TIM_Base_Init>
  htim16.Instance = TIM16;
 80019a6:	4838      	ldr	r0, [pc, #224]	; (8001a88 <main+0x23c>)
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <main+0x240>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	6084      	str	r4, [r0, #8]
  htim16.Instance = TIM16;
 80019ac:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 48000-1;
 80019ae:	4b34      	ldr	r3, [pc, #208]	; (8001a80 <main+0x234>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	6104      	str	r4, [r0, #16]
  htim16.Init.Prescaler = 48000-1;
 80019b2:	6043      	str	r3, [r0, #4]
  htim16.Init.Period = 16000-1;
 80019b4:	4b36      	ldr	r3, [pc, #216]	; (8001a90 <main+0x244>)
  htim16.Init.RepetitionCounter = 0;
 80019b6:	6144      	str	r4, [r0, #20]
  htim16.Init.Period = 16000-1;
 80019b8:	60c3      	str	r3, [r0, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019bc:	f7ff fb1e 	bl	8000ffc <HAL_TIM_Base_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019c0:	0021      	movs	r1, r4
 80019c2:	0028      	movs	r0, r5
 80019c4:	f7ff fcc2 	bl	800134c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,RESET);
 80019c8:	2090      	movs	r0, #144	; 0x90
 80019ca:	0022      	movs	r2, r4
 80019cc:	0031      	movs	r1, r6
 80019ce:	05c0      	lsls	r0, r0, #23
 80019d0:	f7fe fd78 	bl	80004c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,SET);
 80019d4:	2090      	movs	r0, #144	; 0x90
 80019d6:	003a      	movs	r2, r7
 80019d8:	2104      	movs	r1, #4
 80019da:	05c0      	lsls	r0, r0, #23
 80019dc:	f7fe fd72 	bl	80004c4 <HAL_GPIO_WritePin>
  Rocket_Init(rocket_info);
 80019e0:	4c2c      	ldr	r4, [pc, #176]	; (8001a94 <main+0x248>)
		  if(0 != (Rocket_isAbleToDeploy_1stStage(rocket_info)&ROCKET_ABLETODEPLOY_1STSTAGE)){
 80019e2:	2510      	movs	r5, #16
  Rocket_Init(rocket_info);
 80019e4:	7860      	ldrb	r0, [r4, #1]
 80019e6:	7823      	ldrb	r3, [r4, #0]
 80019e8:	0200      	lsls	r0, r0, #8
 80019ea:	4318      	orrs	r0, r3
 80019ec:	f000 f858 	bl	8001aa0 <Rocket_Init>
  DriveAirCylinder();
 80019f0:	f7ff ff1c 	bl	800182c <DriveAirCylinder>
  HAL_Delay(5000);
 80019f4:	4828      	ldr	r0, [pc, #160]	; (8001a98 <main+0x24c>)
 80019f6:	f7fe fc57 	bl	80002a8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,SET);
 80019fa:	2090      	movs	r0, #144	; 0x90
 80019fc:	003a      	movs	r2, r7
 80019fe:	0031      	movs	r1, r6
 8001a00:	05c0      	lsls	r0, r0, #23
 8001a02:	f7fe fd5f 	bl	80004c4 <HAL_GPIO_WritePin>
  ReleaseServo();
 8001a06:	f7ff ff09 	bl	800181c <ReleaseServo>
  ReleaseAirCylinder();
 8001a0a:	f7ff ff17 	bl	800183c <ReleaseAirCylinder>
	  if(0 != (Rocket_isAllowedDeploy(rocket_info)&ROCKET_ALLOWEDDEPLOY)){
 8001a0e:	7860      	ldrb	r0, [r4, #1]
 8001a10:	7823      	ldrb	r3, [r4, #0]
 8001a12:	0200      	lsls	r0, r0, #8
 8001a14:	4318      	orrs	r0, r3
 8001a16:	f000 f85a 	bl	8001ace <Rocket_isAllowedDeploy>
 8001a1a:	4230      	tst	r0, r6
 8001a1c:	d0f7      	beq.n	8001a0e <main+0x1c2>
		  if(0 != (Rocket_isAbleToDeploy_1stStage(rocket_info)&ROCKET_ABLETODEPLOY_1STSTAGE)){
 8001a1e:	7860      	ldrb	r0, [r4, #1]
 8001a20:	7823      	ldrb	r3, [r4, #0]
 8001a22:	0200      	lsls	r0, r0, #8
 8001a24:	4318      	orrs	r0, r3
 8001a26:	f000 f857 	bl	8001ad8 <Rocket_isAbleToDeploy_1stStage>
 8001a2a:	4228      	tst	r0, r5
 8001a2c:	d001      	beq.n	8001a32 <main+0x1e6>
			  DriveServo();
 8001a2e:	f7ff feed 	bl	800180c <DriveServo>
		  if(0 != (Rocket_isAbleToDeploy_2ndStage(rocket_info)&ROCKET_ABLETODEPLOY_2NDSTAGE)){
 8001a32:	7860      	ldrb	r0, [r4, #1]
 8001a34:	7823      	ldrb	r3, [r4, #0]
 8001a36:	0200      	lsls	r0, r0, #8
 8001a38:	4318      	orrs	r0, r3
 8001a3a:	f000 f852 	bl	8001ae2 <Rocket_isAbleToDeploy_2ndStage>
 8001a3e:	0643      	lsls	r3, r0, #25
 8001a40:	d5e5      	bpl.n	8001a0e <main+0x1c2>
			  ReleaseServo();
 8001a42:	f7ff feeb 	bl	800181c <ReleaseServo>
			  DriveAirCylinder();
 8001a46:	f7ff fef1 	bl	800182c <DriveAirCylinder>
			  HAL_Delay(3000);
 8001a4a:	4814      	ldr	r0, [pc, #80]	; (8001a9c <main+0x250>)
 8001a4c:	f7fe fc2c 	bl	80002a8 <HAL_Delay>
			  ReleaseAirCylinder();
 8001a50:	f7ff fef4 	bl	800183c <ReleaseAirCylinder>
}
 8001a54:	2000      	movs	r0, #0
 8001a56:	b011      	add	sp, #68	; 0x44
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	48000400 	.word	0x48000400
 8001a68:	20000028 	.word	0x20000028
 8001a6c:	40013800 	.word	0x40013800
 8001a70:	20000198 	.word	0x20000198
 8001a74:	0000270f 	.word	0x0000270f
 8001a78:	200001d8 	.word	0x200001d8
 8001a7c:	40002000 	.word	0x40002000
 8001a80:	0000bb7f 	.word	0x0000bb7f
 8001a84:	00002327 	.word	0x00002327
 8001a88:	20000218 	.word	0x20000218
 8001a8c:	40014400 	.word	0x40014400
 8001a90:	00003e7f 	.word	0x00003e7f
 8001a94:	20000024 	.word	0x20000024
 8001a98:	00001388 	.word	0x00001388
 8001a9c:	00000bb8 	.word	0x00000bb8

08001aa0 <Rocket_Init>:
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	b002      	add	sp, #8
 8001aa4:	4770      	bx	lr

08001aa6 <Rocket_UpdateStatusLaunched>:
uint8_t Rocket_ReadStatus(Rocket_Info_t info, Rocket_Status_t selector) {
	return info.rocket_status & selector;
}

void Rocket_SetStatus(Rocket_Info_t *info, Rocket_Status_t selector) {
	info->rocket_status =  info->rocket_status|selector;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	7802      	ldrb	r2, [r0, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	7003      	strb	r3, [r0, #0]
}
 8001aae:	4770      	bx	lr

08001ab0 <Rocket_UpdateStatusAllowDeploy>:
	info->rocket_status =  info->rocket_status|selector;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	7802      	ldrb	r2, [r0, #0]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	7003      	strb	r3, [r0, #0]
}
 8001ab8:	4770      	bx	lr

08001aba <Rocket_UpdateStatusAbleToDeploy_1stStage>:
	info->rocket_status =  info->rocket_status|selector;
 8001aba:	2310      	movs	r3, #16
 8001abc:	7802      	ldrb	r2, [r0, #0]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	7003      	strb	r3, [r0, #0]
}
 8001ac2:	4770      	bx	lr

08001ac4 <Rocket_UpdateStatusAbleToDeploy_2ndStage>:
	info->rocket_status =  info->rocket_status|selector;
 8001ac4:	2340      	movs	r3, #64	; 0x40
 8001ac6:	7802      	ldrb	r2, [r0, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	7003      	strb	r3, [r0, #0]
}
 8001acc:	4770      	bx	lr

08001ace <Rocket_isAllowedDeploy>:
	return Rocket_ReadStatus(info, ROCKET_ALLOWEDDEPLOY);
 8001ace:	2302      	movs	r3, #2
Rocket_Status_t Rocket_isAllowedDeploy(Rocket_Info_t info){
 8001ad0:	b082      	sub	sp, #8
	return Rocket_ReadStatus(info, ROCKET_ALLOWEDDEPLOY);
 8001ad2:	4018      	ands	r0, r3
}
 8001ad4:	b002      	add	sp, #8
 8001ad6:	4770      	bx	lr

08001ad8 <Rocket_isAbleToDeploy_1stStage>:
	return Rocket_ReadStatus(info, ROCKET_ABLETODEPLOY_1STSTAGE);
 8001ad8:	2310      	movs	r3, #16
Rocket_Status_t Rocket_isAbleToDeploy_1stStage(Rocket_Info_t info){
 8001ada:	b082      	sub	sp, #8
	return Rocket_ReadStatus(info, ROCKET_ABLETODEPLOY_1STSTAGE);
 8001adc:	4018      	ands	r0, r3
}
 8001ade:	b002      	add	sp, #8
 8001ae0:	4770      	bx	lr

08001ae2 <Rocket_isAbleToDeploy_2ndStage>:
	return Rocket_ReadStatus(info, ROCKET_ABLETODEPLOY_2NDSTAGE);
 8001ae2:	2340      	movs	r3, #64	; 0x40
Rocket_Status_t Rocket_isAbleToDeploy_2ndStage(Rocket_Info_t info){
 8001ae4:	b082      	sub	sp, #8
	return Rocket_ReadStatus(info, ROCKET_ABLETODEPLOY_2NDSTAGE);
 8001ae6:	4018      	ands	r0, r3
}
 8001ae8:	b002      	add	sp, #8
 8001aea:	4770      	bx	lr

08001aec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	2001      	movs	r0, #1
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <HAL_MspInit+0x2c>)
{
 8001af0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	6999      	ldr	r1, [r3, #24]
 8001af4:	4301      	orrs	r1, r0
 8001af6:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afc:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4002      	ands	r2, r0
 8001b00:	9200      	str	r2, [sp, #0]
 8001b02:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	61da      	str	r2, [r3, #28]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	400b      	ands	r3, r1
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b12:	b002      	add	sp, #8
 8001b14:	4770      	bx	lr
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	6803      	ldr	r3, [r0, #0]
 8001b22:	05d2      	lsls	r2, r2, #23
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d10a      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b28:	2001      	movs	r0, #1
 8001b2a:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <HAL_TIM_Base_MspInit+0x78>)
 8001b2c:	69d1      	ldr	r1, [r2, #28]
 8001b2e:	4301      	orrs	r1, r0
 8001b30:	61d1      	str	r1, [r2, #28]
 8001b32:	69d3      	ldr	r3, [r2, #28]
 8001b34:	4003      	ands	r3, r0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b3a:	b005      	add	sp, #20
 8001b3c:	bd00      	pop	{pc}
  else if(htim_base->Instance==TIM14)
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <HAL_TIM_Base_MspInit+0x7c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d112      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b44:	2080      	movs	r0, #128	; 0x80
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_TIM_Base_MspInit+0x78>)
 8001b48:	0040      	lsls	r0, r0, #1
 8001b4a:	69d1      	ldr	r1, [r2, #28]
 8001b4c:	4301      	orrs	r1, r0
 8001b4e:	61d1      	str	r1, [r2, #28]
 8001b50:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b54:	4003      	ands	r3, r0
 8001b56:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b58:	38ed      	subs	r0, #237	; 0xed
 8001b5a:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b5c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b5e:	f7fe fbb3 	bl	80002c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001b62:	2013      	movs	r0, #19
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001b64:	f7fe fbe0 	bl	8000328 <HAL_NVIC_EnableIRQ>
}
 8001b68:	e7e7      	b.n	8001b3a <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM16)
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_TIM_Base_MspInit+0x80>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d1e4      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b70:	2080      	movs	r0, #128	; 0x80
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_TIM_Base_MspInit+0x78>)
 8001b74:	0280      	lsls	r0, r0, #10
 8001b76:	6991      	ldr	r1, [r2, #24]
 8001b78:	4301      	orrs	r1, r0
 8001b7a:	6191      	str	r1, [r2, #24]
 8001b7c:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001b7e:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b80:	4003      	ands	r3, r0
 8001b82:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001b84:	2015      	movs	r0, #21
 8001b86:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b88:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001b8a:	f7fe fb9d 	bl	80002c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001b8e:	2015      	movs	r0, #21
 8001b90:	e7e8      	b.n	8001b64 <HAL_TIM_Base_MspInit+0x48>
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40002000 	.word	0x40002000
 8001b9c:	40014400 	.word	0x40014400

08001ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	0004      	movs	r4, r0
 8001ba4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	2214      	movs	r2, #20
 8001ba8:	2100      	movs	r1, #0
 8001baa:	a801      	add	r0, sp, #4
 8001bac:	f000 f911 	bl	8001dd2 <memset>
  if(htim->Instance==TIM2)
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	6822      	ldr	r2, [r4, #0]
 8001bb4:	05db      	lsls	r3, r3, #23
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d115      	bne.n	8001be6 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	2080      	movs	r0, #128	; 0x80
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_TIM_MspPostInit+0x4c>)
 8001bbe:	0280      	lsls	r0, r0, #10
 8001bc0:	6951      	ldr	r1, [r2, #20]
 8001bc2:	4301      	orrs	r1, r0
 8001bc4:	6151      	str	r1, [r2, #20]
 8001bc6:	6953      	ldr	r3, [r2, #20]
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc8:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4003      	ands	r3, r0
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001bd2:	2320      	movs	r3, #32
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001bd6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	3b1e      	subs	r3, #30
 8001bdc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bde:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001be0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f7fe fbc5 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001be6:	b006      	add	sp, #24
 8001be8:	bd10      	pop	{r4, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	0004      	movs	r4, r0
 8001bf4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	2214      	movs	r2, #20
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	a803      	add	r0, sp, #12
 8001bfc:	f000 f8e9 	bl	8001dd2 <memset>
  if(huart->Instance==USART1)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_UART_MspInit+0x60>)
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d120      	bne.n	8001c4a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c08:	2080      	movs	r0, #128	; 0x80
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_UART_MspInit+0x64>)
 8001c0c:	01c0      	lsls	r0, r0, #7
 8001c0e:	6999      	ldr	r1, [r3, #24]
 8001c10:	4301      	orrs	r1, r0
 8001c12:	6199      	str	r1, [r3, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c16:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c1a:	4002      	ands	r2, r0
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c22:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	430a      	orrs	r2, r1
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	400b      	ands	r3, r1
 8001c2e:	9302      	str	r3, [sp, #8]
 8001c30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8001c32:	23c0      	movs	r3, #192	; 0xc0
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001c42:	3b02      	subs	r3, #2
 8001c44:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f7fe fb93 	bl	8000370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c4a:	b008      	add	sp, #32
 8001c4c:	bd10      	pop	{r4, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40013800 	.word	0x40013800
 8001c54:	40021000 	.word	0x40021000

08001c58 <NMI_Handler>:
 8001c58:	4770      	bx	lr

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler>

08001c5c <SVC_Handler>:
 8001c5c:	4770      	bx	lr

08001c5e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c62:	f7fe fb13 	bl	800028c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c66:	bd10      	pop	{r4, pc}

08001c68 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001c68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001c6a:	2008      	movs	r0, #8
 8001c6c:	f7fe fc30 	bl	80004d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001c70:	bd10      	pop	{r4, pc}

08001c72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c72:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001c74:	2010      	movs	r0, #16
 8001c76:	f7fe fc2b 	bl	80004d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001c7a:	2020      	movs	r0, #32
 8001c7c:	f7fe fc28 	bl	80004d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c80:	bd10      	pop	{r4, pc}
	...

08001c84 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001c84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c86:	4802      	ldr	r0, [pc, #8]	; (8001c90 <TIM14_IRQHandler+0xc>)
 8001c88:	f7ff f8cb 	bl	8000e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001c8c:	bd10      	pop	{r4, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	200001d8 	.word	0x200001d8

08001c94 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001c94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001c96:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <TIM16_IRQHandler+0xc>)
 8001c98:	f7ff f8c3 	bl	8000e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001c9c:	bd10      	pop	{r4, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	20000218 	.word	0x20000218

08001ca4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001ca8:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4002      	ands	r2, r0
 8001cb4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	480e      	ldr	r0, [pc, #56]	; (8001cf4 <SystemInit+0x50>)
 8001cba:	4002      	ands	r2, r0
 8001cbc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	480d      	ldr	r0, [pc, #52]	; (8001cf8 <SystemInit+0x54>)
 8001cc2:	4002      	ands	r2, r0
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <SystemInit+0x58>)
 8001cca:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ccc:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001cce:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd2:	4382      	bics	r2, r0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8001cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <SystemInit+0x5c>)
 8001cda:	4002      	ands	r2, r0
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce0:	438a      	bics	r2, r1
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]

}
 8001ce8:	4770      	bx	lr
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08ffb80c 	.word	0x08ffb80c
 8001cf4:	fef6ffff 	.word	0xfef6ffff
 8001cf8:	fffbffff 	.word	0xfffbffff
 8001cfc:	ffc0ffff 	.word	0xffc0ffff
 8001d00:	fffffe2c 	.word	0xfffffe2c

08001d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d04:	4813      	ldr	r0, [pc, #76]	; (8001d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d06:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001d08:	2004      	movs	r0, #4
    LDR R1, [R0]
 8001d0a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001d0c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001d0e:	221f      	movs	r2, #31
    CMP R1, R2
 8001d10:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001d12:	d105      	bne.n	8001d20 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001d14:	4810      	ldr	r0, [pc, #64]	; (8001d58 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8001d16:	2101      	movs	r1, #1
    STR R1, [R0]
 8001d18:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001d1a:	4810      	ldr	r0, [pc, #64]	; (8001d5c <LoopForever+0xa>)
    LDR R1,=0x00000000
 8001d1c:	2100      	movs	r1, #0
    STR R1, [R0]
 8001d1e:	6001      	str	r1, [r0, #0]

08001d20 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <LoopForever+0xe>)
  ldr r1, =_edata
 8001d22:	4910      	ldr	r1, [pc, #64]	; (8001d64 <LoopForever+0x12>)
  ldr r2, =_sidata
 8001d24:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <LoopForever+0x16>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d28:	e002      	b.n	8001d30 <LoopCopyDataInit>

08001d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2e:	3304      	adds	r3, #4

08001d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d34:	d3f9      	bcc.n	8001d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <LoopForever+0x1a>)
  ldr r4, =_ebss
 8001d38:	4c0d      	ldr	r4, [pc, #52]	; (8001d70 <LoopForever+0x1e>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d3c:	e001      	b.n	8001d42 <LoopFillZerobss>

08001d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d40:	3204      	adds	r2, #4

08001d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d44:	d3fb      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d46:	f7ff ffad 	bl	8001ca4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d4a:	f000 f815 	bl	8001d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4e:	f7ff fd7d 	bl	800184c <main>

08001d52 <LoopForever>:

LoopForever:
    b LoopForever
 8001d52:	e7fe      	b.n	8001d52 <LoopForever>
  ldr   r0, =_estack
 8001d54:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8001d58:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8001d5c:	40010000 	.word	0x40010000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001d68:	08001e40 	.word	0x08001e40
  ldr r2, =_sbss
 8001d6c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001d70:	20000258 	.word	0x20000258

08001d74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC1_IRQHandler>
	...

08001d78 <__libc_init_array>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	2600      	movs	r6, #0
 8001d7c:	4d0c      	ldr	r5, [pc, #48]	; (8001db0 <__libc_init_array+0x38>)
 8001d7e:	4c0d      	ldr	r4, [pc, #52]	; (8001db4 <__libc_init_array+0x3c>)
 8001d80:	1b64      	subs	r4, r4, r5
 8001d82:	10a4      	asrs	r4, r4, #2
 8001d84:	42a6      	cmp	r6, r4
 8001d86:	d109      	bne.n	8001d9c <__libc_init_array+0x24>
 8001d88:	2600      	movs	r6, #0
 8001d8a:	f000 f82b 	bl	8001de4 <_init>
 8001d8e:	4d0a      	ldr	r5, [pc, #40]	; (8001db8 <__libc_init_array+0x40>)
 8001d90:	4c0a      	ldr	r4, [pc, #40]	; (8001dbc <__libc_init_array+0x44>)
 8001d92:	1b64      	subs	r4, r4, r5
 8001d94:	10a4      	asrs	r4, r4, #2
 8001d96:	42a6      	cmp	r6, r4
 8001d98:	d105      	bne.n	8001da6 <__libc_init_array+0x2e>
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	00b3      	lsls	r3, r6, #2
 8001d9e:	58eb      	ldr	r3, [r5, r3]
 8001da0:	4798      	blx	r3
 8001da2:	3601      	adds	r6, #1
 8001da4:	e7ee      	b.n	8001d84 <__libc_init_array+0xc>
 8001da6:	00b3      	lsls	r3, r6, #2
 8001da8:	58eb      	ldr	r3, [r5, r3]
 8001daa:	4798      	blx	r3
 8001dac:	3601      	adds	r6, #1
 8001dae:	e7f2      	b.n	8001d96 <__libc_init_array+0x1e>
 8001db0:	08001e38 	.word	0x08001e38
 8001db4:	08001e38 	.word	0x08001e38
 8001db8:	08001e38 	.word	0x08001e38
 8001dbc:	08001e3c 	.word	0x08001e3c

08001dc0 <memcpy>:
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	b510      	push	{r4, lr}
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d100      	bne.n	8001dca <memcpy+0xa>
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	5ccc      	ldrb	r4, [r1, r3]
 8001dcc:	54c4      	strb	r4, [r0, r3]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	e7f8      	b.n	8001dc4 <memcpy+0x4>

08001dd2 <memset>:
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	1882      	adds	r2, r0, r2
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d100      	bne.n	8001ddc <memset+0xa>
 8001dda:	4770      	bx	lr
 8001ddc:	7019      	strb	r1, [r3, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	e7f9      	b.n	8001dd6 <memset+0x4>
	...

08001de4 <_init>:
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dea:	bc08      	pop	{r3}
 8001dec:	469e      	mov	lr, r3
 8001dee:	4770      	bx	lr

08001df0 <_fini>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df6:	bc08      	pop	{r3}
 8001df8:	469e      	mov	lr, r3
 8001dfa:	4770      	bx	lr
